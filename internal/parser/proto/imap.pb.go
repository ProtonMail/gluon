// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: imap.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchKeyword int32

const (
	SearchKeyword_SearchKWAll        SearchKeyword = 0
	SearchKeyword_SearchKWAnswered   SearchKeyword = 1
	SearchKeyword_SearchKWBcc        SearchKeyword = 2
	SearchKeyword_SearchKWBefore     SearchKeyword = 3
	SearchKeyword_SearchKWBody       SearchKeyword = 4
	SearchKeyword_SearchKWCc         SearchKeyword = 5
	SearchKeyword_SearchKWDeleted    SearchKeyword = 6
	SearchKeyword_SearchKWDraft      SearchKeyword = 7
	SearchKeyword_SearchKWFlagged    SearchKeyword = 8
	SearchKeyword_SearchKWFrom       SearchKeyword = 9
	SearchKeyword_SearchKWHeader     SearchKeyword = 10
	SearchKeyword_SearchKWKeyword    SearchKeyword = 11
	SearchKeyword_SearchKWLarger     SearchKeyword = 12
	SearchKeyword_SearchKWNew        SearchKeyword = 13
	SearchKeyword_SearchKWNot        SearchKeyword = 14
	SearchKeyword_SearchKWOld        SearchKeyword = 15
	SearchKeyword_SearchKWOn         SearchKeyword = 16
	SearchKeyword_SearchKWOr         SearchKeyword = 17
	SearchKeyword_SearchKWRecent     SearchKeyword = 18
	SearchKeyword_SearchKWSeen       SearchKeyword = 19
	SearchKeyword_SearchKWSentBefore SearchKeyword = 20
	SearchKeyword_SearchKWSentOn     SearchKeyword = 21
	SearchKeyword_SearchKWSentSince  SearchKeyword = 22
	SearchKeyword_SearchKWSince      SearchKeyword = 23
	SearchKeyword_SearchKWSmaller    SearchKeyword = 24
	SearchKeyword_SearchKWSubject    SearchKeyword = 25
	SearchKeyword_SearchKWText       SearchKeyword = 26
	SearchKeyword_SearchKWTo         SearchKeyword = 27
	SearchKeyword_SearchKWUID        SearchKeyword = 28
	SearchKeyword_SearchKWUnanswered SearchKeyword = 29
	SearchKeyword_SearchKWUndeleted  SearchKeyword = 30
	SearchKeyword_SearchKWUndraft    SearchKeyword = 31
	SearchKeyword_SearchKWUnflagged  SearchKeyword = 32
	SearchKeyword_SearchKWUnkeyword  SearchKeyword = 33
	SearchKeyword_SearchKWUnseen     SearchKeyword = 34
	SearchKeyword_SearchKWSeqSet     SearchKeyword = 35
	SearchKeyword_SearchKWList       SearchKeyword = 36
)

// Enum value maps for SearchKeyword.
var (
	SearchKeyword_name = map[int32]string{
		0:  "SearchKWAll",
		1:  "SearchKWAnswered",
		2:  "SearchKWBcc",
		3:  "SearchKWBefore",
		4:  "SearchKWBody",
		5:  "SearchKWCc",
		6:  "SearchKWDeleted",
		7:  "SearchKWDraft",
		8:  "SearchKWFlagged",
		9:  "SearchKWFrom",
		10: "SearchKWHeader",
		11: "SearchKWKeyword",
		12: "SearchKWLarger",
		13: "SearchKWNew",
		14: "SearchKWNot",
		15: "SearchKWOld",
		16: "SearchKWOn",
		17: "SearchKWOr",
		18: "SearchKWRecent",
		19: "SearchKWSeen",
		20: "SearchKWSentBefore",
		21: "SearchKWSentOn",
		22: "SearchKWSentSince",
		23: "SearchKWSince",
		24: "SearchKWSmaller",
		25: "SearchKWSubject",
		26: "SearchKWText",
		27: "SearchKWTo",
		28: "SearchKWUID",
		29: "SearchKWUnanswered",
		30: "SearchKWUndeleted",
		31: "SearchKWUndraft",
		32: "SearchKWUnflagged",
		33: "SearchKWUnkeyword",
		34: "SearchKWUnseen",
		35: "SearchKWSeqSet",
		36: "SearchKWList",
	}
	SearchKeyword_value = map[string]int32{
		"SearchKWAll":        0,
		"SearchKWAnswered":   1,
		"SearchKWBcc":        2,
		"SearchKWBefore":     3,
		"SearchKWBody":       4,
		"SearchKWCc":         5,
		"SearchKWDeleted":    6,
		"SearchKWDraft":      7,
		"SearchKWFlagged":    8,
		"SearchKWFrom":       9,
		"SearchKWHeader":     10,
		"SearchKWKeyword":    11,
		"SearchKWLarger":     12,
		"SearchKWNew":        13,
		"SearchKWNot":        14,
		"SearchKWOld":        15,
		"SearchKWOn":         16,
		"SearchKWOr":         17,
		"SearchKWRecent":     18,
		"SearchKWSeen":       19,
		"SearchKWSentBefore": 20,
		"SearchKWSentOn":     21,
		"SearchKWSentSince":  22,
		"SearchKWSince":      23,
		"SearchKWSmaller":    24,
		"SearchKWSubject":    25,
		"SearchKWText":       26,
		"SearchKWTo":         27,
		"SearchKWUID":        28,
		"SearchKWUnanswered": 29,
		"SearchKWUndeleted":  30,
		"SearchKWUndraft":    31,
		"SearchKWUnflagged":  32,
		"SearchKWUnkeyword":  33,
		"SearchKWUnseen":     34,
		"SearchKWSeqSet":     35,
		"SearchKWList":       36,
	}
)

func (x SearchKeyword) Enum() *SearchKeyword {
	p := new(SearchKeyword)
	*p = x
	return p
}

func (x SearchKeyword) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchKeyword) Descriptor() protoreflect.EnumDescriptor {
	return file_imap_proto_enumTypes[0].Descriptor()
}

func (SearchKeyword) Type() protoreflect.EnumType {
	return &file_imap_proto_enumTypes[0]
}

func (x SearchKeyword) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchKeyword.Descriptor instead.
func (SearchKeyword) EnumDescriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{0}
}

type FetchKeyword int32

const (
	FetchKeyword_FetchKWEnvelope      FetchKeyword = 0
	FetchKeyword_FetchKWFlags         FetchKeyword = 1
	FetchKeyword_FetchKWInternalDate  FetchKeyword = 2
	FetchKeyword_FetchKWRFC822        FetchKeyword = 3
	FetchKeyword_FetchKWRFC822Header  FetchKeyword = 4
	FetchKeyword_FetchKWRFC822Size    FetchKeyword = 5
	FetchKeyword_FetchKWRFC822Text    FetchKeyword = 6
	FetchKeyword_FetchKWBody          FetchKeyword = 7
	FetchKeyword_FetchKWBodyStructure FetchKeyword = 8
	FetchKeyword_FetchKWUID           FetchKeyword = 9
)

// Enum value maps for FetchKeyword.
var (
	FetchKeyword_name = map[int32]string{
		0: "FetchKWEnvelope",
		1: "FetchKWFlags",
		2: "FetchKWInternalDate",
		3: "FetchKWRFC822",
		4: "FetchKWRFC822Header",
		5: "FetchKWRFC822Size",
		6: "FetchKWRFC822Text",
		7: "FetchKWBody",
		8: "FetchKWBodyStructure",
		9: "FetchKWUID",
	}
	FetchKeyword_value = map[string]int32{
		"FetchKWEnvelope":      0,
		"FetchKWFlags":         1,
		"FetchKWInternalDate":  2,
		"FetchKWRFC822":        3,
		"FetchKWRFC822Header":  4,
		"FetchKWRFC822Size":    5,
		"FetchKWRFC822Text":    6,
		"FetchKWBody":          7,
		"FetchKWBodyStructure": 8,
		"FetchKWUID":           9,
	}
)

func (x FetchKeyword) Enum() *FetchKeyword {
	p := new(FetchKeyword)
	*p = x
	return p
}

func (x FetchKeyword) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FetchKeyword) Descriptor() protoreflect.EnumDescriptor {
	return file_imap_proto_enumTypes[1].Descriptor()
}

func (FetchKeyword) Type() protoreflect.EnumType {
	return &file_imap_proto_enumTypes[1]
}

func (x FetchKeyword) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FetchKeyword.Descriptor instead.
func (FetchKeyword) EnumDescriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{1}
}

type SectionKeyword int32

const (
	SectionKeyword_Header          SectionKeyword = 0
	SectionKeyword_HeaderFields    SectionKeyword = 1
	SectionKeyword_HeaderFieldsNot SectionKeyword = 2
	SectionKeyword_Text            SectionKeyword = 3
	SectionKeyword_MIME            SectionKeyword = 4
)

// Enum value maps for SectionKeyword.
var (
	SectionKeyword_name = map[int32]string{
		0: "Header",
		1: "HeaderFields",
		2: "HeaderFieldsNot",
		3: "Text",
		4: "MIME",
	}
	SectionKeyword_value = map[string]int32{
		"Header":          0,
		"HeaderFields":    1,
		"HeaderFieldsNot": 2,
		"Text":            3,
		"MIME":            4,
	}
)

func (x SectionKeyword) Enum() *SectionKeyword {
	p := new(SectionKeyword)
	*p = x
	return p
}

func (x SectionKeyword) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SectionKeyword) Descriptor() protoreflect.EnumDescriptor {
	return file_imap_proto_enumTypes[2].Descriptor()
}

func (SectionKeyword) Type() protoreflect.EnumType {
	return &file_imap_proto_enumTypes[2]
}

func (x SectionKeyword) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SectionKeyword.Descriptor instead.
func (SectionKeyword) EnumDescriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{2}
}

type Operation int32

const (
	Operation_Replace Operation = 0
	Operation_Add     Operation = 1
	Operation_Remove  Operation = 2
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0: "Replace",
		1: "Add",
		2: "Remove",
	}
	Operation_value = map[string]int32{
		"Replace": 0,
		"Add":     1,
		"Remove":  2,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_imap_proto_enumTypes[3].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_imap_proto_enumTypes[3]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{3}
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//	*Command_Capability
	//	*Command_Noop
	//	*Command_Logout
	//	*Command_StartTLS
	//	*Command_Auth
	//	*Command_Login
	//	*Command_Select
	//	*Command_Examine
	//	*Command_Create
	//	*Command_Del
	//	*Command_Rename
	//	*Command_Sub
	//	*Command_Unsub
	//	*Command_List
	//	*Command_Lsub
	//	*Command_Status
	//	*Command_Append
	//	*Command_Check
	//	*Command_Close
	//	*Command_Expunge
	//	*Command_UidExpunge
	//	*Command_Unselect
	//	*Command_Search
	//	*Command_Fetch
	//	*Command_Store
	//	*Command_Copy
	//	*Command_Uid
	//	*Command_Idle
	//	*Command_Done
	//	*Command_Move
	//	*Command_IdSet
	//	*Command_IdGet
	Command isCommand_Command `protobuf_oneof:"command"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{0}
}

func (m *Command) GetCommand() isCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *Command) GetCapability() *Capability {
	if x, ok := x.GetCommand().(*Command_Capability); ok {
		return x.Capability
	}
	return nil
}

func (x *Command) GetNoop() *Noop {
	if x, ok := x.GetCommand().(*Command_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *Command) GetLogout() *Logout {
	if x, ok := x.GetCommand().(*Command_Logout); ok {
		return x.Logout
	}
	return nil
}

func (x *Command) GetStartTLS() *StartTLS {
	if x, ok := x.GetCommand().(*Command_StartTLS); ok {
		return x.StartTLS
	}
	return nil
}

func (x *Command) GetAuth() *Auth {
	if x, ok := x.GetCommand().(*Command_Auth); ok {
		return x.Auth
	}
	return nil
}

func (x *Command) GetLogin() *Login {
	if x, ok := x.GetCommand().(*Command_Login); ok {
		return x.Login
	}
	return nil
}

func (x *Command) GetSelect() *Select {
	if x, ok := x.GetCommand().(*Command_Select); ok {
		return x.Select
	}
	return nil
}

func (x *Command) GetExamine() *Examine {
	if x, ok := x.GetCommand().(*Command_Examine); ok {
		return x.Examine
	}
	return nil
}

func (x *Command) GetCreate() *Create {
	if x, ok := x.GetCommand().(*Command_Create); ok {
		return x.Create
	}
	return nil
}

func (x *Command) GetDel() *Del {
	if x, ok := x.GetCommand().(*Command_Del); ok {
		return x.Del
	}
	return nil
}

func (x *Command) GetRename() *Rename {
	if x, ok := x.GetCommand().(*Command_Rename); ok {
		return x.Rename
	}
	return nil
}

func (x *Command) GetSub() *Sub {
	if x, ok := x.GetCommand().(*Command_Sub); ok {
		return x.Sub
	}
	return nil
}

func (x *Command) GetUnsub() *Unsub {
	if x, ok := x.GetCommand().(*Command_Unsub); ok {
		return x.Unsub
	}
	return nil
}

func (x *Command) GetList() *List {
	if x, ok := x.GetCommand().(*Command_List); ok {
		return x.List
	}
	return nil
}

func (x *Command) GetLsub() *Lsub {
	if x, ok := x.GetCommand().(*Command_Lsub); ok {
		return x.Lsub
	}
	return nil
}

func (x *Command) GetStatus() *Status {
	if x, ok := x.GetCommand().(*Command_Status); ok {
		return x.Status
	}
	return nil
}

func (x *Command) GetAppend() *Append {
	if x, ok := x.GetCommand().(*Command_Append); ok {
		return x.Append
	}
	return nil
}

func (x *Command) GetCheck() *Check {
	if x, ok := x.GetCommand().(*Command_Check); ok {
		return x.Check
	}
	return nil
}

func (x *Command) GetClose() *Close {
	if x, ok := x.GetCommand().(*Command_Close); ok {
		return x.Close
	}
	return nil
}

func (x *Command) GetExpunge() *Expunge {
	if x, ok := x.GetCommand().(*Command_Expunge); ok {
		return x.Expunge
	}
	return nil
}

func (x *Command) GetUidExpunge() *UIDExpunge {
	if x, ok := x.GetCommand().(*Command_UidExpunge); ok {
		return x.UidExpunge
	}
	return nil
}

func (x *Command) GetUnselect() *Unselect {
	if x, ok := x.GetCommand().(*Command_Unselect); ok {
		return x.Unselect
	}
	return nil
}

func (x *Command) GetSearch() *Search {
	if x, ok := x.GetCommand().(*Command_Search); ok {
		return x.Search
	}
	return nil
}

func (x *Command) GetFetch() *Fetch {
	if x, ok := x.GetCommand().(*Command_Fetch); ok {
		return x.Fetch
	}
	return nil
}

func (x *Command) GetStore() *Store {
	if x, ok := x.GetCommand().(*Command_Store); ok {
		return x.Store
	}
	return nil
}

func (x *Command) GetCopy() *Copy {
	if x, ok := x.GetCommand().(*Command_Copy); ok {
		return x.Copy
	}
	return nil
}

func (x *Command) GetUid() *UID {
	if x, ok := x.GetCommand().(*Command_Uid); ok {
		return x.Uid
	}
	return nil
}

func (x *Command) GetIdle() *Idle {
	if x, ok := x.GetCommand().(*Command_Idle); ok {
		return x.Idle
	}
	return nil
}

func (x *Command) GetDone() *Done {
	if x, ok := x.GetCommand().(*Command_Done); ok {
		return x.Done
	}
	return nil
}

func (x *Command) GetMove() *Move {
	if x, ok := x.GetCommand().(*Command_Move); ok {
		return x.Move
	}
	return nil
}

func (x *Command) GetIdSet() *IDSet {
	if x, ok := x.GetCommand().(*Command_IdSet); ok {
		return x.IdSet
	}
	return nil
}

func (x *Command) GetIdGet() *IDGet {
	if x, ok := x.GetCommand().(*Command_IdGet); ok {
		return x.IdGet
	}
	return nil
}

type isCommand_Command interface {
	isCommand_Command()
}

type Command_Capability struct {
	// 6.1. Client Commands - Any State
	Capability *Capability `protobuf:"bytes,2,opt,name=capability,proto3,oneof"`
}

type Command_Noop struct {
	Noop *Noop `protobuf:"bytes,3,opt,name=noop,proto3,oneof"`
}

type Command_Logout struct {
	Logout *Logout `protobuf:"bytes,4,opt,name=logout,proto3,oneof"`
}

type Command_StartTLS struct {
	// 6.2. Client Commands - Not Authenticated State
	StartTLS *StartTLS `protobuf:"bytes,5,opt,name=startTLS,proto3,oneof"`
}

type Command_Auth struct {
	Auth *Auth `protobuf:"bytes,6,opt,name=auth,proto3,oneof"`
}

type Command_Login struct {
	Login *Login `protobuf:"bytes,7,opt,name=login,proto3,oneof"`
}

type Command_Select struct {
	// 6.3. Client Commands - Authenticated State
	Select *Select `protobuf:"bytes,8,opt,name=select,proto3,oneof"`
}

type Command_Examine struct {
	Examine *Examine `protobuf:"bytes,9,opt,name=examine,proto3,oneof"`
}

type Command_Create struct {
	Create *Create `protobuf:"bytes,10,opt,name=create,proto3,oneof"`
}

type Command_Del struct {
	Del *Del `protobuf:"bytes,11,opt,name=del,proto3,oneof"`
}

type Command_Rename struct {
	Rename *Rename `protobuf:"bytes,12,opt,name=rename,proto3,oneof"`
}

type Command_Sub struct {
	Sub *Sub `protobuf:"bytes,13,opt,name=sub,proto3,oneof"`
}

type Command_Unsub struct {
	Unsub *Unsub `protobuf:"bytes,14,opt,name=unsub,proto3,oneof"`
}

type Command_List struct {
	List *List `protobuf:"bytes,15,opt,name=list,proto3,oneof"`
}

type Command_Lsub struct {
	Lsub *Lsub `protobuf:"bytes,16,opt,name=lsub,proto3,oneof"`
}

type Command_Status struct {
	Status *Status `protobuf:"bytes,17,opt,name=status,proto3,oneof"`
}

type Command_Append struct {
	Append *Append `protobuf:"bytes,18,opt,name=append,proto3,oneof"`
}

type Command_Check struct {
	// 6.4. Client Commands - Selected State
	Check *Check `protobuf:"bytes,19,opt,name=check,proto3,oneof"`
}

type Command_Close struct {
	Close *Close `protobuf:"bytes,20,opt,name=close,proto3,oneof"`
}

type Command_Expunge struct {
	Expunge *Expunge `protobuf:"bytes,21,opt,name=expunge,proto3,oneof"`
}

type Command_UidExpunge struct {
	UidExpunge *UIDExpunge `protobuf:"bytes,22,opt,name=uidExpunge,proto3,oneof"`
}

type Command_Unselect struct {
	Unselect *Unselect `protobuf:"bytes,23,opt,name=unselect,proto3,oneof"`
}

type Command_Search struct {
	Search *Search `protobuf:"bytes,24,opt,name=search,proto3,oneof"`
}

type Command_Fetch struct {
	Fetch *Fetch `protobuf:"bytes,25,opt,name=fetch,proto3,oneof"`
}

type Command_Store struct {
	Store *Store `protobuf:"bytes,26,opt,name=store,proto3,oneof"`
}

type Command_Copy struct {
	Copy *Copy `protobuf:"bytes,27,opt,name=copy,proto3,oneof"`
}

type Command_Uid struct {
	Uid *UID `protobuf:"bytes,28,opt,name=uid,proto3,oneof"`
}

type Command_Idle struct {
	// RFC2177 Idle command
	Idle *Idle `protobuf:"bytes,29,opt,name=idle,proto3,oneof"`
}

type Command_Done struct {
	Done *Done `protobuf:"bytes,30,opt,name=done,proto3,oneof"`
}

type Command_Move struct {
	// RFC6851 Move command
	Move *Move `protobuf:"bytes,31,opt,name=move,proto3,oneof"`
}

type Command_IdSet struct {
	// RFC2971
	IdSet *IDSet `protobuf:"bytes,32,opt,name=id_set,json=idSet,proto3,oneof"`
}

type Command_IdGet struct {
	IdGet *IDGet `protobuf:"bytes,33,opt,name=id_get,json=idGet,proto3,oneof"`
}

func (*Command_Capability) isCommand_Command() {}

func (*Command_Noop) isCommand_Command() {}

func (*Command_Logout) isCommand_Command() {}

func (*Command_StartTLS) isCommand_Command() {}

func (*Command_Auth) isCommand_Command() {}

func (*Command_Login) isCommand_Command() {}

func (*Command_Select) isCommand_Command() {}

func (*Command_Examine) isCommand_Command() {}

func (*Command_Create) isCommand_Command() {}

func (*Command_Del) isCommand_Command() {}

func (*Command_Rename) isCommand_Command() {}

func (*Command_Sub) isCommand_Command() {}

func (*Command_Unsub) isCommand_Command() {}

func (*Command_List) isCommand_Command() {}

func (*Command_Lsub) isCommand_Command() {}

func (*Command_Status) isCommand_Command() {}

func (*Command_Append) isCommand_Command() {}

func (*Command_Check) isCommand_Command() {}

func (*Command_Close) isCommand_Command() {}

func (*Command_Expunge) isCommand_Command() {}

func (*Command_UidExpunge) isCommand_Command() {}

func (*Command_Unselect) isCommand_Command() {}

func (*Command_Search) isCommand_Command() {}

func (*Command_Fetch) isCommand_Command() {}

func (*Command_Store) isCommand_Command() {}

func (*Command_Copy) isCommand_Command() {}

func (*Command_Uid) isCommand_Command() {}

func (*Command_Idle) isCommand_Command() {}

func (*Command_Done) isCommand_Command() {}

func (*Command_Move) isCommand_Command() {}

func (*Command_IdSet) isCommand_Command() {}

func (*Command_IdGet) isCommand_Command() {}

// 6.1.1 CAPABILITY Command
type Capability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Capability) Reset() {
	*x = Capability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capability) ProtoMessage() {}

func (x *Capability) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capability.ProtoReflect.Descriptor instead.
func (*Capability) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{1}
}

// 6.1.2 NOOP Command
type Noop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Noop) Reset() {
	*x = Noop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Noop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Noop) ProtoMessage() {}

func (x *Noop) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Noop.ProtoReflect.Descriptor instead.
func (*Noop) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{2}
}

// 6.1.3 LOGOUT Command
type Logout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Logout) Reset() {
	*x = Logout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logout) ProtoMessage() {}

func (x *Logout) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logout.ProtoReflect.Descriptor instead.
func (*Logout) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{3}
}

// 6.2.1. STARTTLS Command
type StartTLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartTLS) Reset() {
	*x = StartTLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTLS) ProtoMessage() {}

func (x *StartTLS) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTLS.ProtoReflect.Descriptor instead.
func (*StartTLS) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{4}
}

// 6.2.2. AUTHENTICATE Command
type Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Data []string `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Auth) Reset() {
	*x = Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{5}
}

func (x *Auth) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Auth) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

// 6.2.3. LOGIN Command
type Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password []byte `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Login) Reset() {
	*x = Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Login) ProtoMessage() {}

func (x *Login) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Login.ProtoReflect.Descriptor instead.
func (*Login) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{6}
}

func (x *Login) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Login) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

// 6.3.1. SELECT Command
type Select struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailbox string `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *Select) Reset() {
	*x = Select{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Select) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Select) ProtoMessage() {}

func (x *Select) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Select.ProtoReflect.Descriptor instead.
func (*Select) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{7}
}

func (x *Select) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

// 6.3.2. EXAMINE Command
type Examine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailbox string `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *Examine) Reset() {
	*x = Examine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Examine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Examine) ProtoMessage() {}

func (x *Examine) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Examine.ProtoReflect.Descriptor instead.
func (*Examine) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{8}
}

func (x *Examine) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

// 6.3.3. CREATE Command
type Create struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailbox string `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *Create) Reset() {
	*x = Create{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Create) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Create) ProtoMessage() {}

func (x *Create) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Create.ProtoReflect.Descriptor instead.
func (*Create) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{9}
}

func (x *Create) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

// 6.3.4. DELETE Command
type Del struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailbox string `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *Del) Reset() {
	*x = Del{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Del) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Del) ProtoMessage() {}

func (x *Del) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Del.ProtoReflect.Descriptor instead.
func (*Del) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{10}
}

func (x *Del) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

// 6.3.5. RENAME Command
type Rename struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailbox string `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
	NewName string `protobuf:"bytes,2,opt,name=newName,proto3" json:"newName,omitempty"`
}

func (x *Rename) Reset() {
	*x = Rename{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rename) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rename) ProtoMessage() {}

func (x *Rename) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rename.ProtoReflect.Descriptor instead.
func (*Rename) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{11}
}

func (x *Rename) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

func (x *Rename) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

// 6.3.6. SUBSCRIBE Command
type Sub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailbox string `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *Sub) Reset() {
	*x = Sub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sub) ProtoMessage() {}

func (x *Sub) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sub.ProtoReflect.Descriptor instead.
func (*Sub) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{12}
}

func (x *Sub) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

// 6.3.7. UNSUBSCRIBE Command
type Unsub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailbox string `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *Unsub) Reset() {
	*x = Unsub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unsub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unsub) ProtoMessage() {}

func (x *Unsub) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unsub.ProtoReflect.Descriptor instead.
func (*Unsub) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{13}
}

func (x *Unsub) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

// 6.3.8. LIST Command
type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	Mailbox   string `protobuf:"bytes,2,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{14}
}

func (x *List) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *List) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

// 6.3.9. Lsub Command
type Lsub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	Mailbox   string `protobuf:"bytes,2,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *Lsub) Reset() {
	*x = Lsub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lsub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lsub) ProtoMessage() {}

func (x *Lsub) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lsub.ProtoReflect.Descriptor instead.
func (*Lsub) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{15}
}

func (x *Lsub) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Lsub) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

// 6.3.10. STATUS Command
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailbox    string   `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
	Attributes []string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{16}
}

func (x *Status) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

func (x *Status) GetAttributes() []string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// 6.3.11. APPEND Command
type Append struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailbox string   `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
	Flags   []string `protobuf:"bytes,2,rep,name=flags,proto3" json:"flags,omitempty"`
	// Types that are assignable to OptionalDateTime:
	//	*Append_DateTime
	OptionalDateTime isAppend_OptionalDateTime `protobuf_oneof:"optionalDateTime"`
	Message          []byte                    `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Append) Reset() {
	*x = Append{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Append) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Append) ProtoMessage() {}

func (x *Append) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Append.ProtoReflect.Descriptor instead.
func (*Append) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{17}
}

func (x *Append) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

func (x *Append) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (m *Append) GetOptionalDateTime() isAppend_OptionalDateTime {
	if m != nil {
		return m.OptionalDateTime
	}
	return nil
}

func (x *Append) GetDateTime() *DateTime {
	if x, ok := x.GetOptionalDateTime().(*Append_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Append) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type isAppend_OptionalDateTime interface {
	isAppend_OptionalDateTime()
}

type Append_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,3,opt,name=dateTime,proto3,oneof"`
}

func (*Append_DateTime) isAppend_OptionalDateTime() {}

type DateTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date *Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Time *Time `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Zone *Zone `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *DateTime) Reset() {
	*x = DateTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTime) ProtoMessage() {}

func (x *DateTime) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTime.ProtoReflect.Descriptor instead.
func (*DateTime) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{18}
}

func (x *DateTime) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DateTime) GetTime() *Time {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DateTime) GetZone() *Zone {
	if x != nil {
		return x.Zone
	}
	return nil
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day   int32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Year  int32 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{19}
}

func (x *Date) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *Date) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Date) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour   int32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute int32 `protobuf:"varint,2,opt,name=minute,proto3" json:"minute,omitempty"`
	Second int32 `protobuf:"varint,3,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{20}
}

func (x *Time) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *Time) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *Time) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

type Zone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sign   bool  `protobuf:"varint,1,opt,name=sign,proto3" json:"sign,omitempty"`
	Hour   int32 `protobuf:"varint,2,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute int32 `protobuf:"varint,3,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *Zone) Reset() {
	*x = Zone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zone) ProtoMessage() {}

func (x *Zone) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zone.ProtoReflect.Descriptor instead.
func (*Zone) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{21}
}

func (x *Zone) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

func (x *Zone) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *Zone) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

// 6.4.1. CHECK Command
type Check struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Check) Reset() {
	*x = Check{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Check) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Check) ProtoMessage() {}

func (x *Check) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Check.ProtoReflect.Descriptor instead.
func (*Check) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{22}
}

// 6.4.2. CLOSE Command
type Close struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Close) Reset() {
	*x = Close{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Close) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Close) ProtoMessage() {}

func (x *Close) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Close.ProtoReflect.Descriptor instead.
func (*Close) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{23}
}

// 6.4.3. EXPUNGE Command
type Expunge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Expunge) Reset() {
	*x = Expunge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expunge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expunge) ProtoMessage() {}

func (x *Expunge) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expunge.ProtoReflect.Descriptor instead.
func (*Expunge) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{24}
}

// RFC4315 UIDPLUS Extension
type UIDExpunge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceSet *SequenceSet `protobuf:"bytes,1,opt,name=sequenceSet,proto3" json:"sequenceSet,omitempty"`
}

func (x *UIDExpunge) Reset() {
	*x = UIDExpunge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDExpunge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDExpunge) ProtoMessage() {}

func (x *UIDExpunge) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDExpunge.ProtoReflect.Descriptor instead.
func (*UIDExpunge) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{25}
}

func (x *UIDExpunge) GetSequenceSet() *SequenceSet {
	if x != nil {
		return x.SequenceSet
	}
	return nil
}

// RFC3691 UNSELECT Extension
type Unselect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Unselect) Reset() {
	*x = Unselect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unselect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unselect) ProtoMessage() {}

func (x *Unselect) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unselect.ProtoReflect.Descriptor instead.
func (*Unselect) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{26}
}

// 6.4.4. SEARCH Command
type Search struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OptionalCharset:
	//	*Search_Charset
	OptionalCharset isSearch_OptionalCharset `protobuf_oneof:"optionalCharset"`
	Keys            []*SearchKey             `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *Search) Reset() {
	*x = Search{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Search) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Search) ProtoMessage() {}

func (x *Search) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Search.ProtoReflect.Descriptor instead.
func (*Search) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{27}
}

func (m *Search) GetOptionalCharset() isSearch_OptionalCharset {
	if m != nil {
		return m.OptionalCharset
	}
	return nil
}

func (x *Search) GetCharset() string {
	if x, ok := x.GetOptionalCharset().(*Search_Charset); ok {
		return x.Charset
	}
	return ""
}

func (x *Search) GetKeys() []*SearchKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type isSearch_OptionalCharset interface {
	isSearch_OptionalCharset()
}

type Search_Charset struct {
	Charset string `protobuf:"bytes,1,opt,name=charset,proto3,oneof"`
}

func (*Search_Charset) isSearch_OptionalCharset() {}

type SearchKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword     SearchKeyword `protobuf:"varint,1,opt,name=keyword,proto3,enum=proto.SearchKeyword" json:"keyword,omitempty"`
	Text        []byte        `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Date        string        `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Flag        string        `protobuf:"bytes,4,opt,name=flag,proto3" json:"flag,omitempty"`
	Field       string        `protobuf:"bytes,5,opt,name=field,proto3" json:"field,omitempty"`
	Size        int32         `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	SequenceSet *SequenceSet  `protobuf:"bytes,7,opt,name=sequenceSet,proto3" json:"sequenceSet,omitempty"`
	LeftOp      *SearchKey    `protobuf:"bytes,8,opt,name=leftOp,proto3" json:"leftOp,omitempty"`
	RightOp     *SearchKey    `protobuf:"bytes,9,opt,name=rightOp,proto3" json:"rightOp,omitempty"`
	Children    []*SearchKey  `protobuf:"bytes,10,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *SearchKey) Reset() {
	*x = SearchKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchKey) ProtoMessage() {}

func (x *SearchKey) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchKey.ProtoReflect.Descriptor instead.
func (*SearchKey) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{28}
}

func (x *SearchKey) GetKeyword() SearchKeyword {
	if x != nil {
		return x.Keyword
	}
	return SearchKeyword_SearchKWAll
}

func (x *SearchKey) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *SearchKey) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *SearchKey) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *SearchKey) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SearchKey) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchKey) GetSequenceSet() *SequenceSet {
	if x != nil {
		return x.SequenceSet
	}
	return nil
}

func (x *SearchKey) GetLeftOp() *SearchKey {
	if x != nil {
		return x.LeftOp
	}
	return nil
}

func (x *SearchKey) GetRightOp() *SearchKey {
	if x != nil {
		return x.RightOp
	}
	return nil
}

func (x *SearchKey) GetChildren() []*SearchKey {
	if x != nil {
		return x.Children
	}
	return nil
}

// 6.4.5. FETCH Command
type Fetch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceSet *SequenceSet      `protobuf:"bytes,1,opt,name=sequenceSet,proto3" json:"sequenceSet,omitempty"`
	Attributes  []*FetchAttribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Fetch) Reset() {
	*x = Fetch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fetch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fetch) ProtoMessage() {}

func (x *Fetch) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fetch.ProtoReflect.Descriptor instead.
func (*Fetch) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{29}
}

func (x *Fetch) GetSequenceSet() *SequenceSet {
	if x != nil {
		return x.SequenceSet
	}
	return nil
}

func (x *Fetch) GetAttributes() []*FetchAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type SequenceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SequenceItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SequenceSet) Reset() {
	*x = SequenceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceSet) ProtoMessage() {}

func (x *SequenceSet) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceSet.ProtoReflect.Descriptor instead.
func (*SequenceSet) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{30}
}

func (x *SequenceSet) GetItems() []*SequenceItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type SequenceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Item:
	//	*SequenceItem_Number
	//	*SequenceItem_Range
	Item isSequenceItem_Item `protobuf_oneof:"item"`
}

func (x *SequenceItem) Reset() {
	*x = SequenceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceItem) ProtoMessage() {}

func (x *SequenceItem) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceItem.ProtoReflect.Descriptor instead.
func (*SequenceItem) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{31}
}

func (m *SequenceItem) GetItem() isSequenceItem_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (x *SequenceItem) GetNumber() string {
	if x, ok := x.GetItem().(*SequenceItem_Number); ok {
		return x.Number
	}
	return ""
}

func (x *SequenceItem) GetRange() *SequenceRange {
	if x, ok := x.GetItem().(*SequenceItem_Range); ok {
		return x.Range
	}
	return nil
}

type isSequenceItem_Item interface {
	isSequenceItem_Item()
}

type SequenceItem_Number struct {
	Number string `protobuf:"bytes,1,opt,name=number,proto3,oneof"`
}

type SequenceItem_Range struct {
	Range *SequenceRange `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

func (*SequenceItem_Number) isSequenceItem_Item() {}

func (*SequenceItem_Range) isSequenceItem_Item() {}

type SequenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin string `protobuf:"bytes,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *SequenceRange) Reset() {
	*x = SequenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceRange) ProtoMessage() {}

func (x *SequenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceRange.ProtoReflect.Descriptor instead.
func (*SequenceRange) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{32}
}

func (x *SequenceRange) GetBegin() string {
	if x != nil {
		return x.Begin
	}
	return ""
}

func (x *SequenceRange) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type FetchAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Attribute:
	//	*FetchAttribute_Keyword
	//	*FetchAttribute_Body
	Attribute isFetchAttribute_Attribute `protobuf_oneof:"attribute"`
}

func (x *FetchAttribute) Reset() {
	*x = FetchAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAttribute) ProtoMessage() {}

func (x *FetchAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAttribute.ProtoReflect.Descriptor instead.
func (*FetchAttribute) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{33}
}

func (m *FetchAttribute) GetAttribute() isFetchAttribute_Attribute {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (x *FetchAttribute) GetKeyword() FetchKeyword {
	if x, ok := x.GetAttribute().(*FetchAttribute_Keyword); ok {
		return x.Keyword
	}
	return FetchKeyword_FetchKWEnvelope
}

func (x *FetchAttribute) GetBody() *FetchBody {
	if x, ok := x.GetAttribute().(*FetchAttribute_Body); ok {
		return x.Body
	}
	return nil
}

type isFetchAttribute_Attribute interface {
	isFetchAttribute_Attribute()
}

type FetchAttribute_Keyword struct {
	Keyword FetchKeyword `protobuf:"varint,1,opt,name=keyword,proto3,enum=proto.FetchKeyword,oneof"`
}

type FetchAttribute_Body struct {
	Body *FetchBody `protobuf:"bytes,2,opt,name=body,proto3,oneof"`
}

func (*FetchAttribute_Keyword) isFetchAttribute_Attribute() {}

func (*FetchAttribute_Body) isFetchAttribute_Attribute() {}

type FetchBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OptionalSection:
	//	*FetchBody_Section
	OptionalSection isFetchBody_OptionalSection `protobuf_oneof:"optionalSection"`
	// Types that are assignable to OptionalPartial:
	//	*FetchBody_Partial
	OptionalPartial isFetchBody_OptionalPartial `protobuf_oneof:"optionalPartial"`
	Peek            bool                        `protobuf:"varint,3,opt,name=peek,proto3" json:"peek,omitempty"`
}

func (x *FetchBody) Reset() {
	*x = FetchBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBody) ProtoMessage() {}

func (x *FetchBody) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBody.ProtoReflect.Descriptor instead.
func (*FetchBody) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{34}
}

func (m *FetchBody) GetOptionalSection() isFetchBody_OptionalSection {
	if m != nil {
		return m.OptionalSection
	}
	return nil
}

func (x *FetchBody) GetSection() *BodySection {
	if x, ok := x.GetOptionalSection().(*FetchBody_Section); ok {
		return x.Section
	}
	return nil
}

func (m *FetchBody) GetOptionalPartial() isFetchBody_OptionalPartial {
	if m != nil {
		return m.OptionalPartial
	}
	return nil
}

func (x *FetchBody) GetPartial() *BodyPartial {
	if x, ok := x.GetOptionalPartial().(*FetchBody_Partial); ok {
		return x.Partial
	}
	return nil
}

func (x *FetchBody) GetPeek() bool {
	if x != nil {
		return x.Peek
	}
	return false
}

type isFetchBody_OptionalSection interface {
	isFetchBody_OptionalSection()
}

type FetchBody_Section struct {
	Section *BodySection `protobuf:"bytes,1,opt,name=section,proto3,oneof"`
}

func (*FetchBody_Section) isFetchBody_OptionalSection() {}

type isFetchBody_OptionalPartial interface {
	isFetchBody_OptionalPartial()
}

type FetchBody_Partial struct {
	Partial *BodyPartial `protobuf:"bytes,2,opt,name=partial,proto3,oneof"`
}

func (*FetchBody_Partial) isFetchBody_OptionalPartial() {}

type BodySection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parts []int32 `protobuf:"varint,1,rep,packed,name=parts,proto3" json:"parts,omitempty"`
	// Types that are assignable to OptionalKeyword:
	//	*BodySection_Keyword
	OptionalKeyword isBodySection_OptionalKeyword `protobuf_oneof:"optionalKeyword"`
	Fields          []string                      `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *BodySection) Reset() {
	*x = BodySection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodySection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodySection) ProtoMessage() {}

func (x *BodySection) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodySection.ProtoReflect.Descriptor instead.
func (*BodySection) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{35}
}

func (x *BodySection) GetParts() []int32 {
	if x != nil {
		return x.Parts
	}
	return nil
}

func (m *BodySection) GetOptionalKeyword() isBodySection_OptionalKeyword {
	if m != nil {
		return m.OptionalKeyword
	}
	return nil
}

func (x *BodySection) GetKeyword() SectionKeyword {
	if x, ok := x.GetOptionalKeyword().(*BodySection_Keyword); ok {
		return x.Keyword
	}
	return SectionKeyword_Header
}

func (x *BodySection) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type isBodySection_OptionalKeyword interface {
	isBodySection_OptionalKeyword()
}

type BodySection_Keyword struct {
	Keyword SectionKeyword `protobuf:"varint,2,opt,name=keyword,proto3,enum=proto.SectionKeyword,oneof"`
}

func (*BodySection_Keyword) isBodySection_OptionalKeyword() {}

type BodyPartial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin int32 `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BodyPartial) Reset() {
	*x = BodyPartial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyPartial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyPartial) ProtoMessage() {}

func (x *BodyPartial) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyPartial.ProtoReflect.Descriptor instead.
func (*BodyPartial) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{36}
}

func (x *BodyPartial) GetBegin() int32 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *BodyPartial) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 6.4.6. STORE Command
type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceSet *SequenceSet `protobuf:"bytes,1,opt,name=sequenceSet,proto3" json:"sequenceSet,omitempty"`
	Action      *StoreAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Flags       []string     `protobuf:"bytes,3,rep,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Store) Reset() {
	*x = Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{37}
}

func (x *Store) GetSequenceSet() *SequenceSet {
	if x != nil {
		return x.SequenceSet
	}
	return nil
}

func (x *Store) GetAction() *StoreAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Store) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

type StoreAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=proto.Operation" json:"operation,omitempty"`
	Silent    bool      `protobuf:"varint,2,opt,name=silent,proto3" json:"silent,omitempty"`
}

func (x *StoreAction) Reset() {
	*x = StoreAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreAction) ProtoMessage() {}

func (x *StoreAction) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreAction.ProtoReflect.Descriptor instead.
func (*StoreAction) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{38}
}

func (x *StoreAction) GetOperation() Operation {
	if x != nil {
		return x.Operation
	}
	return Operation_Replace
}

func (x *StoreAction) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

// 6.4.7. COPY Command
type Copy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceSet *SequenceSet `protobuf:"bytes,1,opt,name=sequenceSet,proto3" json:"sequenceSet,omitempty"`
	Mailbox     string       `protobuf:"bytes,2,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *Copy) Reset() {
	*x = Copy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Copy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Copy) ProtoMessage() {}

func (x *Copy) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Copy.ProtoReflect.Descriptor instead.
func (*Copy) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{39}
}

func (x *Copy) GetSequenceSet() *SequenceSet {
	if x != nil {
		return x.SequenceSet
	}
	return nil
}

func (x *Copy) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

// 6.4.8. UID Command
type UID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//	*UID_Copy
	//	*UID_Fetch
	//	*UID_Search
	//	*UID_Store
	//	*UID_Move
	Command isUID_Command `protobuf_oneof:"command"`
}

func (x *UID) Reset() {
	*x = UID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UID) ProtoMessage() {}

func (x *UID) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UID.ProtoReflect.Descriptor instead.
func (*UID) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{40}
}

func (m *UID) GetCommand() isUID_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *UID) GetCopy() *Copy {
	if x, ok := x.GetCommand().(*UID_Copy); ok {
		return x.Copy
	}
	return nil
}

func (x *UID) GetFetch() *Fetch {
	if x, ok := x.GetCommand().(*UID_Fetch); ok {
		return x.Fetch
	}
	return nil
}

func (x *UID) GetSearch() *Search {
	if x, ok := x.GetCommand().(*UID_Search); ok {
		return x.Search
	}
	return nil
}

func (x *UID) GetStore() *Store {
	if x, ok := x.GetCommand().(*UID_Store); ok {
		return x.Store
	}
	return nil
}

func (x *UID) GetMove() *Move {
	if x, ok := x.GetCommand().(*UID_Move); ok {
		return x.Move
	}
	return nil
}

type isUID_Command interface {
	isUID_Command()
}

type UID_Copy struct {
	Copy *Copy `protobuf:"bytes,1,opt,name=copy,proto3,oneof"`
}

type UID_Fetch struct {
	Fetch *Fetch `protobuf:"bytes,2,opt,name=fetch,proto3,oneof"`
}

type UID_Search struct {
	Search *Search `protobuf:"bytes,3,opt,name=search,proto3,oneof"`
}

type UID_Store struct {
	Store *Store `protobuf:"bytes,4,opt,name=store,proto3,oneof"`
}

type UID_Move struct {
	Move *Move `protobuf:"bytes,5,opt,name=move,proto3,oneof"`
}

func (*UID_Copy) isUID_Command() {}

func (*UID_Fetch) isUID_Command() {}

func (*UID_Search) isUID_Command() {}

func (*UID_Store) isUID_Command() {}

func (*UID_Move) isUID_Command() {}

// RFC2177 Idle Command
type Idle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Idle) Reset() {
	*x = Idle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Idle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Idle) ProtoMessage() {}

func (x *Idle) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Idle.ProtoReflect.Descriptor instead.
func (*Idle) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{41}
}

type Done struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Done) Reset() {
	*x = Done{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Done) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Done) ProtoMessage() {}

func (x *Done) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Done.ProtoReflect.Descriptor instead.
func (*Done) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{42}
}

// RFC6851 Move
type Move struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceSet *SequenceSet `protobuf:"bytes,1,opt,name=sequenceSet,proto3" json:"sequenceSet,omitempty"`
	Mailbox     string       `protobuf:"bytes,2,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *Move) Reset() {
	*x = Move{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Move) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Move) ProtoMessage() {}

func (x *Move) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Move.ProtoReflect.Descriptor instead.
func (*Move) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{43}
}

func (x *Move) GetSequenceSet() *SequenceSet {
	if x != nil {
		return x.SequenceSet
	}
	return nil
}

func (x *Move) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

// RFC2971
type IDSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys map[string]string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IDSet) Reset() {
	*x = IDSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDSet) ProtoMessage() {}

func (x *IDSet) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDSet.ProtoReflect.Descriptor instead.
func (*IDSet) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{44}
}

func (x *IDSet) GetKeys() map[string]string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type IDGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IDGet) Reset() {
	*x = IDGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDGet) ProtoMessage() {}

func (x *IDGet) ProtoReflect() protoreflect.Message {
	mi := &file_imap_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDGet.ProtoReflect.Descriptor instead.
func (*IDGet) Descriptor() ([]byte, []int) {
	return file_imap_proto_rawDescGZIP(), []int{45}
}

var File_imap_proto protoreflect.FileDescriptor

var file_imap_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x09, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x33, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x6f, 0x70, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x12, 0x2d, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x4c, 0x53, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x4c, 0x53, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x4c, 0x53, 0x12,
	0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x69,
	0x6e, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x0a,
	0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x64, 0x65, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x48,
	0x00, 0x52, 0x03, 0x64, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x48, 0x00, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12,
	0x24, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x48, 0x00, 0x52, 0x05,
	0x75, 0x6e, 0x73, 0x75, 0x62, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x73, 0x75, 0x62,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x73, 0x75, 0x62, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x73, 0x75, 0x62, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x24, 0x0a,
	0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x75, 0x6e, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78,
	0x70, 0x75, 0x6e, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x75, 0x69, 0x64, 0x45, 0x78, 0x70, 0x75,
	0x6e, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x49, 0x44, 0x45, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x75, 0x69, 0x64, 0x45, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x75, 0x6e,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x24, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48,
	0x00, 0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21,
	0x0a, 0x04, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x70,
	0x79, 0x12, 0x1e, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x49, 0x44, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x69, 0x64, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x6e, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f,
	0x76, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x44, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x69, 0x64, 0x53, 0x65,
	0x74, 0x12, 0x25, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x44, 0x47, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x69, 0x64, 0x47, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x22, 0x0c, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x22, 0x06, 0x0a, 0x04, 0x4e, 0x6f, 0x6f, 0x70, 0x22, 0x08, 0x0a, 0x06, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x22, 0x0a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x4c, 0x53, 0x22,
	0x2e, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x3f, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x22, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69,
	0x6c, 0x62, 0x6f, 0x78, 0x22, 0x23, 0x0a, 0x07, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x22, 0x22, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x22, 0x1f, 0x0a,
	0x03, 0x44, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x22, 0x3c,
	0x0a, 0x06, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c,
	0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62,
	0x6f, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x03,
	0x53, 0x75, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x22, 0x21, 0x0a,
	0x05, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78,
	0x22, 0x3e, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78,
	0x22, 0x3e, 0x0a, 0x04, 0x4c, 0x73, 0x75, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78,
	0x22, 0x42, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69,
	0x6c, 0x62, 0x6f, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x2d, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x42, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22,
	0x4a, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x46, 0x0a, 0x04, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x07, 0x0a, 0x05,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0x09, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65,
	0x22, 0x42, 0x0a, 0x0a, 0x55, 0x49, 0x44, 0x45, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x22, 0x0a, 0x0a, 0x08, 0x55, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x22, 0x5d, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x11, 0x0a, 0x0f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x22,
	0xdb, 0x02, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x65, 0x66,
	0x74, 0x4f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x6c, 0x65, 0x66,
	0x74, 0x4f, 0x70, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x12,
	0x2c, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4b, 0x65, 0x79, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x74, 0x0a,
	0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52,
	0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x0b, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5e, 0x0a,
	0x0c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x37, 0x0a,
	0x0d, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x76, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x42, 0x0b, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0xa5,
	0x01, 0x0a, 0x09, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2e, 0x0a, 0x07,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x48, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x65, 0x65, 0x6b,
	0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x42, 0x6f, 0x64, 0x79, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x39, 0x0a, 0x0b, 0x42, 0x6f,
	0x64, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7f, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x34,
	0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x55, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x22, 0x56, 0x0a,
	0x04, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0b,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x69, 0x6c, 0x62, 0x6f, 0x78, 0x22, 0xcb, 0x01, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x12, 0x21, 0x0a,
	0x04, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x70, 0x79,
	0x12, 0x24, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52,
	0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x24, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x76, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x22, 0x06, 0x0a, 0x04, 0x49, 0x64, 0x6c, 0x65, 0x22, 0x06, 0x0a, 0x04, 0x44,
	0x6f, 0x6e, 0x65, 0x22, 0x56, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x22, 0x6c, 0x0a, 0x05, 0x49,
	0x44, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x44, 0x53, 0x65, 0x74,
	0x2e, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x1a, 0x37, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x07, 0x0a, 0x05, 0x49, 0x44, 0x47,
	0x65, 0x74, 0x2a, 0xe1, 0x05, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57,
	0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b,
	0x57, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x42, 0x63, 0x63, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x42, 0x6f, 0x64, 0x79,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x43, 0x63,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4b, 0x57, 0x44, 0x72, 0x61, 0x66, 0x74, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x10, 0x08, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x46, 0x72, 0x6f, 0x6d, 0x10,
	0x09, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b,
	0x57, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x10, 0x0c, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x4e, 0x65, 0x77, 0x10, 0x0d, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x4e, 0x6f, 0x74, 0x10, 0x0e,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x4f, 0x6c, 0x64, 0x10,
	0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x4f, 0x6e, 0x10,
	0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x4f, 0x72, 0x10,
	0x11, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b,
	0x57, 0x53, 0x65, 0x65, 0x6e, 0x10, 0x13, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4b, 0x57, 0x53, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x10, 0x14, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x53, 0x65, 0x6e, 0x74, 0x4f,
	0x6e, 0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x53,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x10, 0x17, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x19, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4b, 0x57, 0x54, 0x65, 0x78, 0x74, 0x10, 0x1a, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4b, 0x57, 0x54, 0x6f, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4b, 0x57, 0x55, 0x49, 0x44, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x55, 0x6e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64,
	0x10, 0x1d, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x55, 0x6e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4b, 0x57, 0x55, 0x6e, 0x64, 0x72, 0x61, 0x66, 0x74, 0x10, 0x1f, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x55, 0x6e, 0x66, 0x6c, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x10, 0x20, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b,
	0x57, 0x55, 0x6e, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x21, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x55, 0x6e, 0x73, 0x65, 0x65, 0x6e, 0x10, 0x22,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57, 0x53, 0x65, 0x71, 0x53,
	0x65, 0x74, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x57,
	0x4c, 0x69, 0x73, 0x74, 0x10, 0x24, 0x2a, 0xe3, 0x01, 0x0a, 0x0c, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x4b, 0x57, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4b, 0x57, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4b, 0x57, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x4b, 0x57, 0x52, 0x46, 0x43, 0x38, 0x32, 0x32, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4b, 0x57, 0x52, 0x46, 0x43, 0x38, 0x32, 0x32, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4b, 0x57, 0x52, 0x46,
	0x43, 0x38, 0x32, 0x32, 0x53, 0x69, 0x7a, 0x65, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4b, 0x57, 0x52, 0x46, 0x43, 0x38, 0x32, 0x32, 0x54, 0x65, 0x78, 0x74, 0x10,
	0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4b, 0x57, 0x42, 0x6f, 0x64, 0x79,
	0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4b, 0x57, 0x42, 0x6f, 0x64,
	0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4b, 0x57, 0x55, 0x49, 0x44, 0x10, 0x09, 0x2a, 0x57, 0x0a, 0x0e,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0a,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4e, 0x6f, 0x74, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4d,
	0x49, 0x4d, 0x45, 0x10, 0x04, 0x2a, 0x2d, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x10, 0x02, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x4d, 0x61, 0x69, 0x6c, 0x2f, 0x67, 0x6c,
	0x75, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_imap_proto_rawDescOnce sync.Once
	file_imap_proto_rawDescData = file_imap_proto_rawDesc
)

func file_imap_proto_rawDescGZIP() []byte {
	file_imap_proto_rawDescOnce.Do(func() {
		file_imap_proto_rawDescData = protoimpl.X.CompressGZIP(file_imap_proto_rawDescData)
	})
	return file_imap_proto_rawDescData
}

var file_imap_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_imap_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_imap_proto_goTypes = []interface{}{
	(SearchKeyword)(0),     // 0: proto.SearchKeyword
	(FetchKeyword)(0),      // 1: proto.FetchKeyword
	(SectionKeyword)(0),    // 2: proto.SectionKeyword
	(Operation)(0),         // 3: proto.Operation
	(*Command)(nil),        // 4: proto.Command
	(*Capability)(nil),     // 5: proto.Capability
	(*Noop)(nil),           // 6: proto.Noop
	(*Logout)(nil),         // 7: proto.Logout
	(*StartTLS)(nil),       // 8: proto.StartTLS
	(*Auth)(nil),           // 9: proto.Auth
	(*Login)(nil),          // 10: proto.Login
	(*Select)(nil),         // 11: proto.Select
	(*Examine)(nil),        // 12: proto.Examine
	(*Create)(nil),         // 13: proto.Create
	(*Del)(nil),            // 14: proto.Del
	(*Rename)(nil),         // 15: proto.Rename
	(*Sub)(nil),            // 16: proto.Sub
	(*Unsub)(nil),          // 17: proto.Unsub
	(*List)(nil),           // 18: proto.List
	(*Lsub)(nil),           // 19: proto.Lsub
	(*Status)(nil),         // 20: proto.Status
	(*Append)(nil),         // 21: proto.Append
	(*DateTime)(nil),       // 22: proto.DateTime
	(*Date)(nil),           // 23: proto.Date
	(*Time)(nil),           // 24: proto.Time
	(*Zone)(nil),           // 25: proto.Zone
	(*Check)(nil),          // 26: proto.Check
	(*Close)(nil),          // 27: proto.Close
	(*Expunge)(nil),        // 28: proto.Expunge
	(*UIDExpunge)(nil),     // 29: proto.UIDExpunge
	(*Unselect)(nil),       // 30: proto.Unselect
	(*Search)(nil),         // 31: proto.Search
	(*SearchKey)(nil),      // 32: proto.SearchKey
	(*Fetch)(nil),          // 33: proto.Fetch
	(*SequenceSet)(nil),    // 34: proto.SequenceSet
	(*SequenceItem)(nil),   // 35: proto.SequenceItem
	(*SequenceRange)(nil),  // 36: proto.SequenceRange
	(*FetchAttribute)(nil), // 37: proto.FetchAttribute
	(*FetchBody)(nil),      // 38: proto.FetchBody
	(*BodySection)(nil),    // 39: proto.BodySection
	(*BodyPartial)(nil),    // 40: proto.BodyPartial
	(*Store)(nil),          // 41: proto.Store
	(*StoreAction)(nil),    // 42: proto.StoreAction
	(*Copy)(nil),           // 43: proto.Copy
	(*UID)(nil),            // 44: proto.UID
	(*Idle)(nil),           // 45: proto.Idle
	(*Done)(nil),           // 46: proto.Done
	(*Move)(nil),           // 47: proto.Move
	(*IDSet)(nil),          // 48: proto.IDSet
	(*IDGet)(nil),          // 49: proto.IDGet
	nil,                    // 50: proto.IDSet.KeysEntry
}
var file_imap_proto_depIdxs = []int32{
	5,  // 0: proto.Command.capability:type_name -> proto.Capability
	6,  // 1: proto.Command.noop:type_name -> proto.Noop
	7,  // 2: proto.Command.logout:type_name -> proto.Logout
	8,  // 3: proto.Command.startTLS:type_name -> proto.StartTLS
	9,  // 4: proto.Command.auth:type_name -> proto.Auth
	10, // 5: proto.Command.login:type_name -> proto.Login
	11, // 6: proto.Command.select:type_name -> proto.Select
	12, // 7: proto.Command.examine:type_name -> proto.Examine
	13, // 8: proto.Command.create:type_name -> proto.Create
	14, // 9: proto.Command.del:type_name -> proto.Del
	15, // 10: proto.Command.rename:type_name -> proto.Rename
	16, // 11: proto.Command.sub:type_name -> proto.Sub
	17, // 12: proto.Command.unsub:type_name -> proto.Unsub
	18, // 13: proto.Command.list:type_name -> proto.List
	19, // 14: proto.Command.lsub:type_name -> proto.Lsub
	20, // 15: proto.Command.status:type_name -> proto.Status
	21, // 16: proto.Command.append:type_name -> proto.Append
	26, // 17: proto.Command.check:type_name -> proto.Check
	27, // 18: proto.Command.close:type_name -> proto.Close
	28, // 19: proto.Command.expunge:type_name -> proto.Expunge
	29, // 20: proto.Command.uidExpunge:type_name -> proto.UIDExpunge
	30, // 21: proto.Command.unselect:type_name -> proto.Unselect
	31, // 22: proto.Command.search:type_name -> proto.Search
	33, // 23: proto.Command.fetch:type_name -> proto.Fetch
	41, // 24: proto.Command.store:type_name -> proto.Store
	43, // 25: proto.Command.copy:type_name -> proto.Copy
	44, // 26: proto.Command.uid:type_name -> proto.UID
	45, // 27: proto.Command.idle:type_name -> proto.Idle
	46, // 28: proto.Command.done:type_name -> proto.Done
	47, // 29: proto.Command.move:type_name -> proto.Move
	48, // 30: proto.Command.id_set:type_name -> proto.IDSet
	49, // 31: proto.Command.id_get:type_name -> proto.IDGet
	22, // 32: proto.Append.dateTime:type_name -> proto.DateTime
	23, // 33: proto.DateTime.date:type_name -> proto.Date
	24, // 34: proto.DateTime.time:type_name -> proto.Time
	25, // 35: proto.DateTime.zone:type_name -> proto.Zone
	34, // 36: proto.UIDExpunge.sequenceSet:type_name -> proto.SequenceSet
	32, // 37: proto.Search.keys:type_name -> proto.SearchKey
	0,  // 38: proto.SearchKey.keyword:type_name -> proto.SearchKeyword
	34, // 39: proto.SearchKey.sequenceSet:type_name -> proto.SequenceSet
	32, // 40: proto.SearchKey.leftOp:type_name -> proto.SearchKey
	32, // 41: proto.SearchKey.rightOp:type_name -> proto.SearchKey
	32, // 42: proto.SearchKey.children:type_name -> proto.SearchKey
	34, // 43: proto.Fetch.sequenceSet:type_name -> proto.SequenceSet
	37, // 44: proto.Fetch.attributes:type_name -> proto.FetchAttribute
	35, // 45: proto.SequenceSet.items:type_name -> proto.SequenceItem
	36, // 46: proto.SequenceItem.range:type_name -> proto.SequenceRange
	1,  // 47: proto.FetchAttribute.keyword:type_name -> proto.FetchKeyword
	38, // 48: proto.FetchAttribute.body:type_name -> proto.FetchBody
	39, // 49: proto.FetchBody.section:type_name -> proto.BodySection
	40, // 50: proto.FetchBody.partial:type_name -> proto.BodyPartial
	2,  // 51: proto.BodySection.keyword:type_name -> proto.SectionKeyword
	34, // 52: proto.Store.sequenceSet:type_name -> proto.SequenceSet
	42, // 53: proto.Store.action:type_name -> proto.StoreAction
	3,  // 54: proto.StoreAction.operation:type_name -> proto.Operation
	34, // 55: proto.Copy.sequenceSet:type_name -> proto.SequenceSet
	43, // 56: proto.UID.copy:type_name -> proto.Copy
	33, // 57: proto.UID.fetch:type_name -> proto.Fetch
	31, // 58: proto.UID.search:type_name -> proto.Search
	41, // 59: proto.UID.store:type_name -> proto.Store
	47, // 60: proto.UID.move:type_name -> proto.Move
	34, // 61: proto.Move.sequenceSet:type_name -> proto.SequenceSet
	50, // 62: proto.IDSet.keys:type_name -> proto.IDSet.KeysEntry
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_imap_proto_init() }
func file_imap_proto_init() {
	if File_imap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_imap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Noop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Select); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Examine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Create); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Del); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rename); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unsub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lsub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Append); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Zone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Check); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Close); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expunge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDExpunge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unselect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Search); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fetch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodySection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyPartial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Copy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Idle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Done); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Move); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_imap_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Command_Capability)(nil),
		(*Command_Noop)(nil),
		(*Command_Logout)(nil),
		(*Command_StartTLS)(nil),
		(*Command_Auth)(nil),
		(*Command_Login)(nil),
		(*Command_Select)(nil),
		(*Command_Examine)(nil),
		(*Command_Create)(nil),
		(*Command_Del)(nil),
		(*Command_Rename)(nil),
		(*Command_Sub)(nil),
		(*Command_Unsub)(nil),
		(*Command_List)(nil),
		(*Command_Lsub)(nil),
		(*Command_Status)(nil),
		(*Command_Append)(nil),
		(*Command_Check)(nil),
		(*Command_Close)(nil),
		(*Command_Expunge)(nil),
		(*Command_UidExpunge)(nil),
		(*Command_Unselect)(nil),
		(*Command_Search)(nil),
		(*Command_Fetch)(nil),
		(*Command_Store)(nil),
		(*Command_Copy)(nil),
		(*Command_Uid)(nil),
		(*Command_Idle)(nil),
		(*Command_Done)(nil),
		(*Command_Move)(nil),
		(*Command_IdSet)(nil),
		(*Command_IdGet)(nil),
	}
	file_imap_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Append_DateTime)(nil),
	}
	file_imap_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*Search_Charset)(nil),
	}
	file_imap_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*SequenceItem_Number)(nil),
		(*SequenceItem_Range)(nil),
	}
	file_imap_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*FetchAttribute_Keyword)(nil),
		(*FetchAttribute_Body)(nil),
	}
	file_imap_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*FetchBody_Section)(nil),
		(*FetchBody_Partial)(nil),
	}
	file_imap_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*BodySection_Keyword)(nil),
	}
	file_imap_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*UID_Copy)(nil),
		(*UID_Fetch)(nil),
		(*UID_Search)(nil),
		(*UID_Store)(nil),
		(*UID_Move)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imap_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_imap_proto_goTypes,
		DependencyIndexes: file_imap_proto_depIdxs,
		EnumInfos:         file_imap_proto_enumTypes,
		MessageInfos:      file_imap_proto_msgTypes,
	}.Build()
	File_imap_proto = out.File
	file_imap_proto_rawDesc = nil
	file_imap_proto_goTypes = nil
	file_imap_proto_depIdxs = nil
}
