// Code generated by ent, DO NOT EDIT.

package internal

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProtonMail/gluon/internal/db_impl/ent_db/internal/mailboxattr"
	"github.com/ProtonMail/gluon/internal/db_impl/ent_db/internal/predicate"
)

// MailboxAttrDelete is the builder for deleting a MailboxAttr entity.
type MailboxAttrDelete struct {
	config
	hooks    []Hook
	mutation *MailboxAttrMutation
}

// Where appends a list predicates to the MailboxAttrDelete builder.
func (mad *MailboxAttrDelete) Where(ps ...predicate.MailboxAttr) *MailboxAttrDelete {
	mad.mutation.Where(ps...)
	return mad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mad *MailboxAttrDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, MailboxAttrMutation](ctx, mad.sqlExec, mad.mutation, mad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mad *MailboxAttrDelete) ExecX(ctx context.Context) int {
	n, err := mad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mad *MailboxAttrDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(mailboxattr.Table, sqlgraph.NewFieldSpec(mailboxattr.FieldID, field.TypeInt))
	if ps := mad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mad.mutation.done = true
	return affected, err
}

// MailboxAttrDeleteOne is the builder for deleting a single MailboxAttr entity.
type MailboxAttrDeleteOne struct {
	mad *MailboxAttrDelete
}

// Where appends a list predicates to the MailboxAttrDelete builder.
func (mado *MailboxAttrDeleteOne) Where(ps ...predicate.MailboxAttr) *MailboxAttrDeleteOne {
	mado.mad.mutation.Where(ps...)
	return mado
}

// Exec executes the deletion query.
func (mado *MailboxAttrDeleteOne) Exec(ctx context.Context) error {
	n, err := mado.mad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{mailboxattr.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mado *MailboxAttrDeleteOne) ExecX(ctx context.Context) {
	if err := mado.Exec(ctx); err != nil {
		panic(err)
	}
}
