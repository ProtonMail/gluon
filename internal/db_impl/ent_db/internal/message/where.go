// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ProtonMail/gluon/imap"
	"github.com/ProtonMail/gluon/internal/db_impl/ent_db/internal/predicate"
)

// ID filters vertices based on their ID field.
func ID(id imap.InternalMessageID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id imap.InternalMessageID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id imap.InternalMessageID) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...imap.InternalMessageID) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...imap.InternalMessageID) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id imap.InternalMessageID) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id imap.InternalMessageID) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id imap.InternalMessageID) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id imap.InternalMessageID) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// RemoteID applies equality check predicate on the "RemoteID" field. It's identical to RemoteIDEQ.
func RemoteID(v imap.MessageID) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldEQ(FieldRemoteID, vc))
}

// Date applies equality check predicate on the "Date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDate, v))
}

// Size applies equality check predicate on the "Size" field. It's identical to SizeEQ.
func Size(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSize, v))
}

// Body applies equality check predicate on the "Body" field. It's identical to BodyEQ.
func Body(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldBody, v))
}

// BodyStructure applies equality check predicate on the "BodyStructure" field. It's identical to BodyStructureEQ.
func BodyStructure(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldBodyStructure, v))
}

// Envelope applies equality check predicate on the "Envelope" field. It's identical to EnvelopeEQ.
func Envelope(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldEnvelope, v))
}

// Deleted applies equality check predicate on the "Deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDeleted, v))
}

// RemoteIDEQ applies the EQ predicate on the "RemoteID" field.
func RemoteIDEQ(v imap.MessageID) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldEQ(FieldRemoteID, vc))
}

// RemoteIDNEQ applies the NEQ predicate on the "RemoteID" field.
func RemoteIDNEQ(v imap.MessageID) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldNEQ(FieldRemoteID, vc))
}

// RemoteIDIn applies the In predicate on the "RemoteID" field.
func RemoteIDIn(vs ...imap.MessageID) predicate.Message {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Message(sql.FieldIn(FieldRemoteID, v...))
}

// RemoteIDNotIn applies the NotIn predicate on the "RemoteID" field.
func RemoteIDNotIn(vs ...imap.MessageID) predicate.Message {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Message(sql.FieldNotIn(FieldRemoteID, v...))
}

// RemoteIDGT applies the GT predicate on the "RemoteID" field.
func RemoteIDGT(v imap.MessageID) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldGT(FieldRemoteID, vc))
}

// RemoteIDGTE applies the GTE predicate on the "RemoteID" field.
func RemoteIDGTE(v imap.MessageID) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldGTE(FieldRemoteID, vc))
}

// RemoteIDLT applies the LT predicate on the "RemoteID" field.
func RemoteIDLT(v imap.MessageID) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldLT(FieldRemoteID, vc))
}

// RemoteIDLTE applies the LTE predicate on the "RemoteID" field.
func RemoteIDLTE(v imap.MessageID) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldLTE(FieldRemoteID, vc))
}

// RemoteIDContains applies the Contains predicate on the "RemoteID" field.
func RemoteIDContains(v imap.MessageID) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldContains(FieldRemoteID, vc))
}

// RemoteIDHasPrefix applies the HasPrefix predicate on the "RemoteID" field.
func RemoteIDHasPrefix(v imap.MessageID) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldHasPrefix(FieldRemoteID, vc))
}

// RemoteIDHasSuffix applies the HasSuffix predicate on the "RemoteID" field.
func RemoteIDHasSuffix(v imap.MessageID) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldHasSuffix(FieldRemoteID, vc))
}

// RemoteIDIsNil applies the IsNil predicate on the "RemoteID" field.
func RemoteIDIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldRemoteID))
}

// RemoteIDNotNil applies the NotNil predicate on the "RemoteID" field.
func RemoteIDNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldRemoteID))
}

// RemoteIDEqualFold applies the EqualFold predicate on the "RemoteID" field.
func RemoteIDEqualFold(v imap.MessageID) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldEqualFold(FieldRemoteID, vc))
}

// RemoteIDContainsFold applies the ContainsFold predicate on the "RemoteID" field.
func RemoteIDContainsFold(v imap.MessageID) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldContainsFold(FieldRemoteID, vc))
}

// DateEQ applies the EQ predicate on the "Date" field.
func DateEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "Date" field.
func DateNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "Date" field.
func DateIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "Date" field.
func DateNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "Date" field.
func DateGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "Date" field.
func DateGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "Date" field.
func DateLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "Date" field.
func DateLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldDate, v))
}

// SizeEQ applies the EQ predicate on the "Size" field.
func SizeEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "Size" field.
func SizeNEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "Size" field.
func SizeIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "Size" field.
func SizeNotIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "Size" field.
func SizeGT(v int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "Size" field.
func SizeGTE(v int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "Size" field.
func SizeLT(v int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "Size" field.
func SizeLTE(v int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldSize, v))
}

// BodyEQ applies the EQ predicate on the "Body" field.
func BodyEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "Body" field.
func BodyNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "Body" field.
func BodyIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "Body" field.
func BodyNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "Body" field.
func BodyGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "Body" field.
func BodyGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "Body" field.
func BodyLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "Body" field.
func BodyLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "Body" field.
func BodyContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "Body" field.
func BodyHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "Body" field.
func BodyHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldBody, v))
}

// BodyEqualFold applies the EqualFold predicate on the "Body" field.
func BodyEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "Body" field.
func BodyContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldBody, v))
}

// BodyStructureEQ applies the EQ predicate on the "BodyStructure" field.
func BodyStructureEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldBodyStructure, v))
}

// BodyStructureNEQ applies the NEQ predicate on the "BodyStructure" field.
func BodyStructureNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldBodyStructure, v))
}

// BodyStructureIn applies the In predicate on the "BodyStructure" field.
func BodyStructureIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldBodyStructure, vs...))
}

// BodyStructureNotIn applies the NotIn predicate on the "BodyStructure" field.
func BodyStructureNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldBodyStructure, vs...))
}

// BodyStructureGT applies the GT predicate on the "BodyStructure" field.
func BodyStructureGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldBodyStructure, v))
}

// BodyStructureGTE applies the GTE predicate on the "BodyStructure" field.
func BodyStructureGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldBodyStructure, v))
}

// BodyStructureLT applies the LT predicate on the "BodyStructure" field.
func BodyStructureLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldBodyStructure, v))
}

// BodyStructureLTE applies the LTE predicate on the "BodyStructure" field.
func BodyStructureLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldBodyStructure, v))
}

// BodyStructureContains applies the Contains predicate on the "BodyStructure" field.
func BodyStructureContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldBodyStructure, v))
}

// BodyStructureHasPrefix applies the HasPrefix predicate on the "BodyStructure" field.
func BodyStructureHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldBodyStructure, v))
}

// BodyStructureHasSuffix applies the HasSuffix predicate on the "BodyStructure" field.
func BodyStructureHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldBodyStructure, v))
}

// BodyStructureEqualFold applies the EqualFold predicate on the "BodyStructure" field.
func BodyStructureEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldBodyStructure, v))
}

// BodyStructureContainsFold applies the ContainsFold predicate on the "BodyStructure" field.
func BodyStructureContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldBodyStructure, v))
}

// EnvelopeEQ applies the EQ predicate on the "Envelope" field.
func EnvelopeEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldEnvelope, v))
}

// EnvelopeNEQ applies the NEQ predicate on the "Envelope" field.
func EnvelopeNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldEnvelope, v))
}

// EnvelopeIn applies the In predicate on the "Envelope" field.
func EnvelopeIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldEnvelope, vs...))
}

// EnvelopeNotIn applies the NotIn predicate on the "Envelope" field.
func EnvelopeNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldEnvelope, vs...))
}

// EnvelopeGT applies the GT predicate on the "Envelope" field.
func EnvelopeGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldEnvelope, v))
}

// EnvelopeGTE applies the GTE predicate on the "Envelope" field.
func EnvelopeGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldEnvelope, v))
}

// EnvelopeLT applies the LT predicate on the "Envelope" field.
func EnvelopeLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldEnvelope, v))
}

// EnvelopeLTE applies the LTE predicate on the "Envelope" field.
func EnvelopeLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldEnvelope, v))
}

// EnvelopeContains applies the Contains predicate on the "Envelope" field.
func EnvelopeContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldEnvelope, v))
}

// EnvelopeHasPrefix applies the HasPrefix predicate on the "Envelope" field.
func EnvelopeHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldEnvelope, v))
}

// EnvelopeHasSuffix applies the HasSuffix predicate on the "Envelope" field.
func EnvelopeHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldEnvelope, v))
}

// EnvelopeEqualFold applies the EqualFold predicate on the "Envelope" field.
func EnvelopeEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldEnvelope, v))
}

// EnvelopeContainsFold applies the ContainsFold predicate on the "Envelope" field.
func EnvelopeContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldEnvelope, v))
}

// DeletedEQ applies the EQ predicate on the "Deleted" field.
func DeletedEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "Deleted" field.
func DeletedNEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldDeleted, v))
}

// HasFlags applies the HasEdge predicate on the "flags" edge.
func HasFlags() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FlagsTable, FlagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFlagsWith applies the HasEdge predicate on the "flags" edge with a given conditions (other predicates).
func HasFlagsWith(preds ...predicate.MessageFlag) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlagsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FlagsTable, FlagsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUIDs applies the HasEdge predicate on the "UIDs" edge.
func HasUIDs() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UIDsTable, UIDsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUIDsWith applies the HasEdge predicate on the "UIDs" edge with a given conditions (other predicates).
func HasUIDsWith(preds ...predicate.UID) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UIDsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UIDsTable, UIDsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		p(s.Not())
	})
}
