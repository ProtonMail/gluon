// Code generated by ent, DO NOT EDIT.

package internal

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProtonMail/gluon/internal/db_impl/ent_db/internal/messageflag"
	"github.com/ProtonMail/gluon/internal/db_impl/ent_db/internal/predicate"
)

// MessageFlagDelete is the builder for deleting a MessageFlag entity.
type MessageFlagDelete struct {
	config
	hooks    []Hook
	mutation *MessageFlagMutation
}

// Where appends a list predicates to the MessageFlagDelete builder.
func (mfd *MessageFlagDelete) Where(ps ...predicate.MessageFlag) *MessageFlagDelete {
	mfd.mutation.Where(ps...)
	return mfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mfd *MessageFlagDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, MessageFlagMutation](ctx, mfd.sqlExec, mfd.mutation, mfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mfd *MessageFlagDelete) ExecX(ctx context.Context) int {
	n, err := mfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mfd *MessageFlagDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(messageflag.Table, sqlgraph.NewFieldSpec(messageflag.FieldID, field.TypeInt))
	if ps := mfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mfd.mutation.done = true
	return affected, err
}

// MessageFlagDeleteOne is the builder for deleting a single MessageFlag entity.
type MessageFlagDeleteOne struct {
	mfd *MessageFlagDelete
}

// Where appends a list predicates to the MessageFlagDelete builder.
func (mfdo *MessageFlagDeleteOne) Where(ps ...predicate.MessageFlag) *MessageFlagDeleteOne {
	mfdo.mfd.mutation.Where(ps...)
	return mfdo
}

// Exec executes the deletion query.
func (mfdo *MessageFlagDeleteOne) Exec(ctx context.Context) error {
	n, err := mfdo.mfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{messageflag.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mfdo *MessageFlagDeleteOne) ExecX(ctx context.Context) {
	if err := mfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
