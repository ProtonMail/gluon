// Code generated by ent, DO NOT EDIT.

package internal

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProtonMail/gluon/imap"
	"github.com/ProtonMail/gluon/internal/db_impl/ent_db/internal/mailbox"
	"github.com/ProtonMail/gluon/internal/db_impl/ent_db/internal/message"
	"github.com/ProtonMail/gluon/internal/db_impl/ent_db/internal/predicate"
	"github.com/ProtonMail/gluon/internal/db_impl/ent_db/internal/uid"
)

// UIDQuery is the builder for querying UID entities.
type UIDQuery struct {
	config
	ctx         *QueryContext
	order       []OrderFunc
	inters      []Interceptor
	predicates  []predicate.UID
	withMessage *MessageQuery
	withMailbox *MailboxQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UIDQuery builder.
func (uq *UIDQuery) Where(ps ...predicate.UID) *UIDQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UIDQuery) Limit(limit int) *UIDQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *UIDQuery) Offset(offset int) *UIDQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UIDQuery) Unique(unique bool) *UIDQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UIDQuery) Order(o ...OrderFunc) *UIDQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryMessage chains the current query on the "message" edge.
func (uq *UIDQuery) QueryMessage() *MessageQuery {
	query := (&MessageClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(uid.Table, uid.FieldID, selector),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, uid.MessageTable, uid.MessageColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMailbox chains the current query on the "mailbox" edge.
func (uq *UIDQuery) QueryMailbox() *MailboxQuery {
	query := (&MailboxClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(uid.Table, uid.FieldID, selector),
			sqlgraph.To(mailbox.Table, mailbox.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, uid.MailboxTable, uid.MailboxColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UID entity from the query.
// Returns a *NotFoundError when no UID was found.
func (uq *UIDQuery) First(ctx context.Context) (*UID, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{uid.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UIDQuery) FirstX(ctx context.Context) *UID {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UID ID from the query.
// Returns a *NotFoundError when no UID ID was found.
func (uq *UIDQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{uid.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UIDQuery) FirstIDX(ctx context.Context) int {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UID entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UID entity is found.
// Returns a *NotFoundError when no UID entities are found.
func (uq *UIDQuery) Only(ctx context.Context) (*UID, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{uid.Label}
	default:
		return nil, &NotSingularError{uid.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UIDQuery) OnlyX(ctx context.Context) *UID {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UID ID in the query.
// Returns a *NotSingularError when more than one UID ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UIDQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{uid.Label}
	default:
		err = &NotSingularError{uid.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UIDQuery) OnlyIDX(ctx context.Context) int {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UIDs.
func (uq *UIDQuery) All(ctx context.Context) ([]*UID, error) {
	ctx = setContextOp(ctx, uq.ctx, "All")
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UID, *UIDQuery]()
	return withInterceptors[[]*UID](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UIDQuery) AllX(ctx context.Context) []*UID {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UID IDs.
func (uq *UIDQuery) IDs(ctx context.Context) (ids []int, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, "IDs")
	if err = uq.Select(uid.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UIDQuery) IDsX(ctx context.Context) []int {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UIDQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, "Count")
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UIDQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UIDQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UIDQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, "Exist")
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("internal: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UIDQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UIDQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UIDQuery) Clone() *UIDQuery {
	if uq == nil {
		return nil
	}
	return &UIDQuery{
		config:      uq.config,
		ctx:         uq.ctx.Clone(),
		order:       append([]OrderFunc{}, uq.order...),
		inters:      append([]Interceptor{}, uq.inters...),
		predicates:  append([]predicate.UID{}, uq.predicates...),
		withMessage: uq.withMessage.Clone(),
		withMailbox: uq.withMailbox.Clone(),
		// clone intermediate query.
		sql:  uq.sql.Clone(),
		path: uq.path,
	}
}

// WithMessage tells the query-builder to eager-load the nodes that are connected to
// the "message" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UIDQuery) WithMessage(opts ...func(*MessageQuery)) *UIDQuery {
	query := (&MessageClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withMessage = query
	return uq
}

// WithMailbox tells the query-builder to eager-load the nodes that are connected to
// the "mailbox" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UIDQuery) WithMailbox(opts ...func(*MailboxQuery)) *UIDQuery {
	query := (&MailboxClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withMailbox = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UID imap.UID `json:"UID,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UID.Query().
//		GroupBy(uid.FieldUID).
//		Aggregate(internal.Count()).
//		Scan(ctx, &v)
func (uq *UIDQuery) GroupBy(field string, fields ...string) *UIDGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UIDGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = uid.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UID imap.UID `json:"UID,omitempty"`
//	}
//
//	client.UID.Query().
//		Select(uid.FieldUID).
//		Scan(ctx, &v)
func (uq *UIDQuery) Select(fields ...string) *UIDSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &UIDSelect{UIDQuery: uq}
	sbuild.label = uid.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UIDSelect configured with the given aggregations.
func (uq *UIDQuery) Aggregate(fns ...AggregateFunc) *UIDSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UIDQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("internal: uninitialized interceptor (forgotten import internal/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !uid.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("internal: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UIDQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UID, error) {
	var (
		nodes       = []*UID{}
		withFKs     = uq.withFKs
		_spec       = uq.querySpec()
		loadedTypes = [2]bool{
			uq.withMessage != nil,
			uq.withMailbox != nil,
		}
	)
	if uq.withMessage != nil || uq.withMailbox != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, uid.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UID).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UID{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withMessage; query != nil {
		if err := uq.loadMessage(ctx, query, nodes, nil,
			func(n *UID, e *Message) { n.Edges.Message = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withMailbox; query != nil {
		if err := uq.loadMailbox(ctx, query, nodes, nil,
			func(n *UID, e *Mailbox) { n.Edges.Mailbox = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UIDQuery) loadMessage(ctx context.Context, query *MessageQuery, nodes []*UID, init func(*UID), assign func(*UID, *Message)) error {
	ids := make([]imap.InternalMessageID, 0, len(nodes))
	nodeids := make(map[imap.InternalMessageID][]*UID)
	for i := range nodes {
		if nodes[i].uid_message == nil {
			continue
		}
		fk := *nodes[i].uid_message
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(message.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "uid_message" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uq *UIDQuery) loadMailbox(ctx context.Context, query *MailboxQuery, nodes []*UID, init func(*UID), assign func(*UID, *Mailbox)) error {
	ids := make([]imap.InternalMailboxID, 0, len(nodes))
	nodeids := make(map[imap.InternalMailboxID][]*UID)
	for i := range nodes {
		if nodes[i].mailbox_ui_ds == nil {
			continue
		}
		fk := *nodes[i].mailbox_ui_ds
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(mailbox.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mailbox_ui_ds" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (uq *UIDQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UIDQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(uid.Table, uid.Columns, sqlgraph.NewFieldSpec(uid.FieldID, field.TypeInt))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, uid.FieldID)
		for i := range fields {
			if fields[i] != uid.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UIDQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(uid.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = uid.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UIDGroupBy is the group-by builder for UID entities.
type UIDGroupBy struct {
	selector
	build *UIDQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UIDGroupBy) Aggregate(fns ...AggregateFunc) *UIDGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UIDGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, "GroupBy")
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UIDQuery, *UIDGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UIDGroupBy) sqlScan(ctx context.Context, root *UIDQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UIDSelect is the builder for selecting fields of UID entities.
type UIDSelect struct {
	*UIDQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UIDSelect) Aggregate(fns ...AggregateFunc) *UIDSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UIDSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, "Select")
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UIDQuery, *UIDSelect](ctx, us.UIDQuery, us, us.inters, v)
}

func (us *UIDSelect) sqlScan(ctx context.Context, root *UIDQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
