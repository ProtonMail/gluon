// Code generated by ent, DO NOT EDIT.

package mailbox

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ProtonMail/gluon/imap"
	"github.com/ProtonMail/gluon/internal/db_impl/ent_db/internal/predicate"
)

// ID filters vertices based on their ID field.
func ID(id imap.InternalMailboxID) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id imap.InternalMailboxID) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id imap.InternalMailboxID) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...imap.InternalMailboxID) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...imap.InternalMailboxID) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id imap.InternalMailboxID) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id imap.InternalMailboxID) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id imap.InternalMailboxID) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id imap.InternalMailboxID) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldLTE(FieldID, id))
}

// RemoteID applies equality check predicate on the "RemoteID" field. It's identical to RemoteIDEQ.
func RemoteID(v imap.MailboxID) predicate.Mailbox {
	vc := string(v)
	return predicate.Mailbox(sql.FieldEQ(FieldRemoteID, vc))
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldEQ(FieldName, v))
}

// UIDNext applies equality check predicate on the "UIDNext" field. It's identical to UIDNextEQ.
func UIDNext(v imap.UID) predicate.Mailbox {
	vc := uint32(v)
	return predicate.Mailbox(sql.FieldEQ(FieldUIDNext, vc))
}

// UIDValidity applies equality check predicate on the "UIDValidity" field. It's identical to UIDValidityEQ.
func UIDValidity(v imap.UID) predicate.Mailbox {
	vc := uint32(v)
	return predicate.Mailbox(sql.FieldEQ(FieldUIDValidity, vc))
}

// Subscribed applies equality check predicate on the "Subscribed" field. It's identical to SubscribedEQ.
func Subscribed(v bool) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldEQ(FieldSubscribed, v))
}

// RemoteIDEQ applies the EQ predicate on the "RemoteID" field.
func RemoteIDEQ(v imap.MailboxID) predicate.Mailbox {
	vc := string(v)
	return predicate.Mailbox(sql.FieldEQ(FieldRemoteID, vc))
}

// RemoteIDNEQ applies the NEQ predicate on the "RemoteID" field.
func RemoteIDNEQ(v imap.MailboxID) predicate.Mailbox {
	vc := string(v)
	return predicate.Mailbox(sql.FieldNEQ(FieldRemoteID, vc))
}

// RemoteIDIn applies the In predicate on the "RemoteID" field.
func RemoteIDIn(vs ...imap.MailboxID) predicate.Mailbox {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Mailbox(sql.FieldIn(FieldRemoteID, v...))
}

// RemoteIDNotIn applies the NotIn predicate on the "RemoteID" field.
func RemoteIDNotIn(vs ...imap.MailboxID) predicate.Mailbox {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Mailbox(sql.FieldNotIn(FieldRemoteID, v...))
}

// RemoteIDGT applies the GT predicate on the "RemoteID" field.
func RemoteIDGT(v imap.MailboxID) predicate.Mailbox {
	vc := string(v)
	return predicate.Mailbox(sql.FieldGT(FieldRemoteID, vc))
}

// RemoteIDGTE applies the GTE predicate on the "RemoteID" field.
func RemoteIDGTE(v imap.MailboxID) predicate.Mailbox {
	vc := string(v)
	return predicate.Mailbox(sql.FieldGTE(FieldRemoteID, vc))
}

// RemoteIDLT applies the LT predicate on the "RemoteID" field.
func RemoteIDLT(v imap.MailboxID) predicate.Mailbox {
	vc := string(v)
	return predicate.Mailbox(sql.FieldLT(FieldRemoteID, vc))
}

// RemoteIDLTE applies the LTE predicate on the "RemoteID" field.
func RemoteIDLTE(v imap.MailboxID) predicate.Mailbox {
	vc := string(v)
	return predicate.Mailbox(sql.FieldLTE(FieldRemoteID, vc))
}

// RemoteIDContains applies the Contains predicate on the "RemoteID" field.
func RemoteIDContains(v imap.MailboxID) predicate.Mailbox {
	vc := string(v)
	return predicate.Mailbox(sql.FieldContains(FieldRemoteID, vc))
}

// RemoteIDHasPrefix applies the HasPrefix predicate on the "RemoteID" field.
func RemoteIDHasPrefix(v imap.MailboxID) predicate.Mailbox {
	vc := string(v)
	return predicate.Mailbox(sql.FieldHasPrefix(FieldRemoteID, vc))
}

// RemoteIDHasSuffix applies the HasSuffix predicate on the "RemoteID" field.
func RemoteIDHasSuffix(v imap.MailboxID) predicate.Mailbox {
	vc := string(v)
	return predicate.Mailbox(sql.FieldHasSuffix(FieldRemoteID, vc))
}

// RemoteIDIsNil applies the IsNil predicate on the "RemoteID" field.
func RemoteIDIsNil() predicate.Mailbox {
	return predicate.Mailbox(sql.FieldIsNull(FieldRemoteID))
}

// RemoteIDNotNil applies the NotNil predicate on the "RemoteID" field.
func RemoteIDNotNil() predicate.Mailbox {
	return predicate.Mailbox(sql.FieldNotNull(FieldRemoteID))
}

// RemoteIDEqualFold applies the EqualFold predicate on the "RemoteID" field.
func RemoteIDEqualFold(v imap.MailboxID) predicate.Mailbox {
	vc := string(v)
	return predicate.Mailbox(sql.FieldEqualFold(FieldRemoteID, vc))
}

// RemoteIDContainsFold applies the ContainsFold predicate on the "RemoteID" field.
func RemoteIDContainsFold(v imap.MailboxID) predicate.Mailbox {
	vc := string(v)
	return predicate.Mailbox(sql.FieldContainsFold(FieldRemoteID, vc))
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldContainsFold(FieldName, v))
}

// UIDNextEQ applies the EQ predicate on the "UIDNext" field.
func UIDNextEQ(v imap.UID) predicate.Mailbox {
	vc := uint32(v)
	return predicate.Mailbox(sql.FieldEQ(FieldUIDNext, vc))
}

// UIDNextNEQ applies the NEQ predicate on the "UIDNext" field.
func UIDNextNEQ(v imap.UID) predicate.Mailbox {
	vc := uint32(v)
	return predicate.Mailbox(sql.FieldNEQ(FieldUIDNext, vc))
}

// UIDNextIn applies the In predicate on the "UIDNext" field.
func UIDNextIn(vs ...imap.UID) predicate.Mailbox {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint32(vs[i])
	}
	return predicate.Mailbox(sql.FieldIn(FieldUIDNext, v...))
}

// UIDNextNotIn applies the NotIn predicate on the "UIDNext" field.
func UIDNextNotIn(vs ...imap.UID) predicate.Mailbox {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint32(vs[i])
	}
	return predicate.Mailbox(sql.FieldNotIn(FieldUIDNext, v...))
}

// UIDNextGT applies the GT predicate on the "UIDNext" field.
func UIDNextGT(v imap.UID) predicate.Mailbox {
	vc := uint32(v)
	return predicate.Mailbox(sql.FieldGT(FieldUIDNext, vc))
}

// UIDNextGTE applies the GTE predicate on the "UIDNext" field.
func UIDNextGTE(v imap.UID) predicate.Mailbox {
	vc := uint32(v)
	return predicate.Mailbox(sql.FieldGTE(FieldUIDNext, vc))
}

// UIDNextLT applies the LT predicate on the "UIDNext" field.
func UIDNextLT(v imap.UID) predicate.Mailbox {
	vc := uint32(v)
	return predicate.Mailbox(sql.FieldLT(FieldUIDNext, vc))
}

// UIDNextLTE applies the LTE predicate on the "UIDNext" field.
func UIDNextLTE(v imap.UID) predicate.Mailbox {
	vc := uint32(v)
	return predicate.Mailbox(sql.FieldLTE(FieldUIDNext, vc))
}

// UIDValidityEQ applies the EQ predicate on the "UIDValidity" field.
func UIDValidityEQ(v imap.UID) predicate.Mailbox {
	vc := uint32(v)
	return predicate.Mailbox(sql.FieldEQ(FieldUIDValidity, vc))
}

// UIDValidityNEQ applies the NEQ predicate on the "UIDValidity" field.
func UIDValidityNEQ(v imap.UID) predicate.Mailbox {
	vc := uint32(v)
	return predicate.Mailbox(sql.FieldNEQ(FieldUIDValidity, vc))
}

// UIDValidityIn applies the In predicate on the "UIDValidity" field.
func UIDValidityIn(vs ...imap.UID) predicate.Mailbox {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint32(vs[i])
	}
	return predicate.Mailbox(sql.FieldIn(FieldUIDValidity, v...))
}

// UIDValidityNotIn applies the NotIn predicate on the "UIDValidity" field.
func UIDValidityNotIn(vs ...imap.UID) predicate.Mailbox {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint32(vs[i])
	}
	return predicate.Mailbox(sql.FieldNotIn(FieldUIDValidity, v...))
}

// UIDValidityGT applies the GT predicate on the "UIDValidity" field.
func UIDValidityGT(v imap.UID) predicate.Mailbox {
	vc := uint32(v)
	return predicate.Mailbox(sql.FieldGT(FieldUIDValidity, vc))
}

// UIDValidityGTE applies the GTE predicate on the "UIDValidity" field.
func UIDValidityGTE(v imap.UID) predicate.Mailbox {
	vc := uint32(v)
	return predicate.Mailbox(sql.FieldGTE(FieldUIDValidity, vc))
}

// UIDValidityLT applies the LT predicate on the "UIDValidity" field.
func UIDValidityLT(v imap.UID) predicate.Mailbox {
	vc := uint32(v)
	return predicate.Mailbox(sql.FieldLT(FieldUIDValidity, vc))
}

// UIDValidityLTE applies the LTE predicate on the "UIDValidity" field.
func UIDValidityLTE(v imap.UID) predicate.Mailbox {
	vc := uint32(v)
	return predicate.Mailbox(sql.FieldLTE(FieldUIDValidity, vc))
}

// SubscribedEQ applies the EQ predicate on the "Subscribed" field.
func SubscribedEQ(v bool) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldEQ(FieldSubscribed, v))
}

// SubscribedNEQ applies the NEQ predicate on the "Subscribed" field.
func SubscribedNEQ(v bool) predicate.Mailbox {
	return predicate.Mailbox(sql.FieldNEQ(FieldSubscribed, v))
}

// HasUIDs applies the HasEdge predicate on the "UIDs" edge.
func HasUIDs() predicate.Mailbox {
	return predicate.Mailbox(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UIDsTable, UIDsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUIDsWith applies the HasEdge predicate on the "UIDs" edge with a given conditions (other predicates).
func HasUIDsWith(preds ...predicate.UID) predicate.Mailbox {
	return predicate.Mailbox(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UIDsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UIDsTable, UIDsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFlags applies the HasEdge predicate on the "flags" edge.
func HasFlags() predicate.Mailbox {
	return predicate.Mailbox(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FlagsTable, FlagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFlagsWith applies the HasEdge predicate on the "flags" edge with a given conditions (other predicates).
func HasFlagsWith(preds ...predicate.MailboxFlag) predicate.Mailbox {
	return predicate.Mailbox(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlagsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FlagsTable, FlagsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPermanentFlags applies the HasEdge predicate on the "permanent_flags" edge.
func HasPermanentFlags() predicate.Mailbox {
	return predicate.Mailbox(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PermanentFlagsTable, PermanentFlagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermanentFlagsWith applies the HasEdge predicate on the "permanent_flags" edge with a given conditions (other predicates).
func HasPermanentFlagsWith(preds ...predicate.MailboxPermFlag) predicate.Mailbox {
	return predicate.Mailbox(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PermanentFlagsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PermanentFlagsTable, PermanentFlagsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttributes applies the HasEdge predicate on the "attributes" edge.
func HasAttributes() predicate.Mailbox {
	return predicate.Mailbox(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttributesTable, AttributesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttributesWith applies the HasEdge predicate on the "attributes" edge with a given conditions (other predicates).
func HasAttributesWith(preds ...predicate.MailboxAttr) predicate.Mailbox {
	return predicate.Mailbox(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttributesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttributesTable, AttributesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Mailbox) predicate.Mailbox {
	return predicate.Mailbox(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Mailbox) predicate.Mailbox {
	return predicate.Mailbox(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Mailbox) predicate.Mailbox {
	return predicate.Mailbox(func(s *sql.Selector) {
		p(s.Not())
	})
}
