// Code generated by ent, DO NOT EDIT.

package internal

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProtonMail/gluon/internal/db_impl/ent_db/internal/mailboxpermflag"
	"github.com/ProtonMail/gluon/internal/db_impl/ent_db/internal/predicate"
)

// MailboxPermFlagDelete is the builder for deleting a MailboxPermFlag entity.
type MailboxPermFlagDelete struct {
	config
	hooks    []Hook
	mutation *MailboxPermFlagMutation
}

// Where appends a list predicates to the MailboxPermFlagDelete builder.
func (mpfd *MailboxPermFlagDelete) Where(ps ...predicate.MailboxPermFlag) *MailboxPermFlagDelete {
	mpfd.mutation.Where(ps...)
	return mpfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mpfd *MailboxPermFlagDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, MailboxPermFlagMutation](ctx, mpfd.sqlExec, mpfd.mutation, mpfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mpfd *MailboxPermFlagDelete) ExecX(ctx context.Context) int {
	n, err := mpfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mpfd *MailboxPermFlagDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(mailboxpermflag.Table, sqlgraph.NewFieldSpec(mailboxpermflag.FieldID, field.TypeInt))
	if ps := mpfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mpfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mpfd.mutation.done = true
	return affected, err
}

// MailboxPermFlagDeleteOne is the builder for deleting a single MailboxPermFlag entity.
type MailboxPermFlagDeleteOne struct {
	mpfd *MailboxPermFlagDelete
}

// Where appends a list predicates to the MailboxPermFlagDelete builder.
func (mpfdo *MailboxPermFlagDeleteOne) Where(ps ...predicate.MailboxPermFlag) *MailboxPermFlagDeleteOne {
	mpfdo.mpfd.mutation.Where(ps...)
	return mpfdo
}

// Exec executes the deletion query.
func (mpfdo *MailboxPermFlagDeleteOne) Exec(ctx context.Context) error {
	n, err := mpfdo.mpfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{mailboxpermflag.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mpfdo *MailboxPermFlagDeleteOne) ExecX(ctx context.Context) {
	if err := mpfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
