// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProtonMail/gluon/internal/backend/ent/messageflag"
	"github.com/ProtonMail/gluon/internal/backend/ent/predicate"
)

// MessageFlagQuery is the builder for querying MessageFlag entities.
type MessageFlagQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.MessageFlag
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MessageFlagQuery builder.
func (mfq *MessageFlagQuery) Where(ps ...predicate.MessageFlag) *MessageFlagQuery {
	mfq.predicates = append(mfq.predicates, ps...)
	return mfq
}

// Limit adds a limit step to the query.
func (mfq *MessageFlagQuery) Limit(limit int) *MessageFlagQuery {
	mfq.limit = &limit
	return mfq
}

// Offset adds an offset step to the query.
func (mfq *MessageFlagQuery) Offset(offset int) *MessageFlagQuery {
	mfq.offset = &offset
	return mfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mfq *MessageFlagQuery) Unique(unique bool) *MessageFlagQuery {
	mfq.unique = &unique
	return mfq
}

// Order adds an order step to the query.
func (mfq *MessageFlagQuery) Order(o ...OrderFunc) *MessageFlagQuery {
	mfq.order = append(mfq.order, o...)
	return mfq
}

// First returns the first MessageFlag entity from the query.
// Returns a *NotFoundError when no MessageFlag was found.
func (mfq *MessageFlagQuery) First(ctx context.Context) (*MessageFlag, error) {
	nodes, err := mfq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{messageflag.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mfq *MessageFlagQuery) FirstX(ctx context.Context) *MessageFlag {
	node, err := mfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MessageFlag ID from the query.
// Returns a *NotFoundError when no MessageFlag ID was found.
func (mfq *MessageFlagQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mfq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{messageflag.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mfq *MessageFlagQuery) FirstIDX(ctx context.Context) int {
	id, err := mfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MessageFlag entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MessageFlag entity is found.
// Returns a *NotFoundError when no MessageFlag entities are found.
func (mfq *MessageFlagQuery) Only(ctx context.Context) (*MessageFlag, error) {
	nodes, err := mfq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{messageflag.Label}
	default:
		return nil, &NotSingularError{messageflag.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mfq *MessageFlagQuery) OnlyX(ctx context.Context) *MessageFlag {
	node, err := mfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MessageFlag ID in the query.
// Returns a *NotSingularError when more than one MessageFlag ID is found.
// Returns a *NotFoundError when no entities are found.
func (mfq *MessageFlagQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mfq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{messageflag.Label}
	default:
		err = &NotSingularError{messageflag.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mfq *MessageFlagQuery) OnlyIDX(ctx context.Context) int {
	id, err := mfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MessageFlags.
func (mfq *MessageFlagQuery) All(ctx context.Context) ([]*MessageFlag, error) {
	if err := mfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return mfq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (mfq *MessageFlagQuery) AllX(ctx context.Context) []*MessageFlag {
	nodes, err := mfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MessageFlag IDs.
func (mfq *MessageFlagQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := mfq.Select(messageflag.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mfq *MessageFlagQuery) IDsX(ctx context.Context) []int {
	ids, err := mfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mfq *MessageFlagQuery) Count(ctx context.Context) (int, error) {
	if err := mfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return mfq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (mfq *MessageFlagQuery) CountX(ctx context.Context) int {
	count, err := mfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mfq *MessageFlagQuery) Exist(ctx context.Context) (bool, error) {
	if err := mfq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return mfq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (mfq *MessageFlagQuery) ExistX(ctx context.Context) bool {
	exist, err := mfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MessageFlagQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mfq *MessageFlagQuery) Clone() *MessageFlagQuery {
	if mfq == nil {
		return nil
	}
	return &MessageFlagQuery{
		config:     mfq.config,
		limit:      mfq.limit,
		offset:     mfq.offset,
		order:      append([]OrderFunc{}, mfq.order...),
		predicates: append([]predicate.MessageFlag{}, mfq.predicates...),
		// clone intermediate query.
		sql:    mfq.sql.Clone(),
		path:   mfq.path,
		unique: mfq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Value string `json:"Value,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MessageFlag.Query().
//		GroupBy(messageflag.FieldValue).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (mfq *MessageFlagQuery) GroupBy(field string, fields ...string) *MessageFlagGroupBy {
	group := &MessageFlagGroupBy{config: mfq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := mfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return mfq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Value string `json:"Value,omitempty"`
//	}
//
//	client.MessageFlag.Query().
//		Select(messageflag.FieldValue).
//		Scan(ctx, &v)
//
func (mfq *MessageFlagQuery) Select(fields ...string) *MessageFlagSelect {
	mfq.fields = append(mfq.fields, fields...)
	return &MessageFlagSelect{MessageFlagQuery: mfq}
}

func (mfq *MessageFlagQuery) prepareQuery(ctx context.Context) error {
	for _, f := range mfq.fields {
		if !messageflag.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mfq.path != nil {
		prev, err := mfq.path(ctx)
		if err != nil {
			return err
		}
		mfq.sql = prev
	}
	return nil
}

func (mfq *MessageFlagQuery) sqlAll(ctx context.Context) ([]*MessageFlag, error) {
	var (
		nodes   = []*MessageFlag{}
		withFKs = mfq.withFKs
		_spec   = mfq.querySpec()
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, messageflag.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &MessageFlag{config: mfq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, mfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (mfq *MessageFlagQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mfq.querySpec()
	_spec.Node.Columns = mfq.fields
	if len(mfq.fields) > 0 {
		_spec.Unique = mfq.unique != nil && *mfq.unique
	}
	return sqlgraph.CountNodes(ctx, mfq.driver, _spec)
}

func (mfq *MessageFlagQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := mfq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (mfq *MessageFlagQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messageflag.Table,
			Columns: messageflag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messageflag.FieldID,
			},
		},
		From:   mfq.sql,
		Unique: true,
	}
	if unique := mfq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := mfq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messageflag.FieldID)
		for i := range fields {
			if fields[i] != messageflag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mfq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mfq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mfq *MessageFlagQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mfq.driver.Dialect())
	t1 := builder.Table(messageflag.Table)
	columns := mfq.fields
	if len(columns) == 0 {
		columns = messageflag.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mfq.sql != nil {
		selector = mfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mfq.unique != nil && *mfq.unique {
		selector.Distinct()
	}
	for _, p := range mfq.predicates {
		p(selector)
	}
	for _, p := range mfq.order {
		p(selector)
	}
	if offset := mfq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mfq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MessageFlagGroupBy is the group-by builder for MessageFlag entities.
type MessageFlagGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mfgb *MessageFlagGroupBy) Aggregate(fns ...AggregateFunc) *MessageFlagGroupBy {
	mfgb.fns = append(mfgb.fns, fns...)
	return mfgb
}

// Scan applies the group-by query and scans the result into the given value.
func (mfgb *MessageFlagGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := mfgb.path(ctx)
	if err != nil {
		return err
	}
	mfgb.sql = query
	return mfgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mfgb *MessageFlagGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := mfgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (mfgb *MessageFlagGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(mfgb.fields) > 1 {
		return nil, errors.New("ent: MessageFlagGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := mfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mfgb *MessageFlagGroupBy) StringsX(ctx context.Context) []string {
	v, err := mfgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mfgb *MessageFlagGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mfgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{messageflag.Label}
	default:
		err = fmt.Errorf("ent: MessageFlagGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mfgb *MessageFlagGroupBy) StringX(ctx context.Context) string {
	v, err := mfgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (mfgb *MessageFlagGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(mfgb.fields) > 1 {
		return nil, errors.New("ent: MessageFlagGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := mfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mfgb *MessageFlagGroupBy) IntsX(ctx context.Context) []int {
	v, err := mfgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mfgb *MessageFlagGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mfgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{messageflag.Label}
	default:
		err = fmt.Errorf("ent: MessageFlagGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mfgb *MessageFlagGroupBy) IntX(ctx context.Context) int {
	v, err := mfgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (mfgb *MessageFlagGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(mfgb.fields) > 1 {
		return nil, errors.New("ent: MessageFlagGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := mfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mfgb *MessageFlagGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := mfgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mfgb *MessageFlagGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mfgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{messageflag.Label}
	default:
		err = fmt.Errorf("ent: MessageFlagGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mfgb *MessageFlagGroupBy) Float64X(ctx context.Context) float64 {
	v, err := mfgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (mfgb *MessageFlagGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(mfgb.fields) > 1 {
		return nil, errors.New("ent: MessageFlagGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := mfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mfgb *MessageFlagGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := mfgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mfgb *MessageFlagGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mfgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{messageflag.Label}
	default:
		err = fmt.Errorf("ent: MessageFlagGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mfgb *MessageFlagGroupBy) BoolX(ctx context.Context) bool {
	v, err := mfgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mfgb *MessageFlagGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range mfgb.fields {
		if !messageflag.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := mfgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mfgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mfgb *MessageFlagGroupBy) sqlQuery() *sql.Selector {
	selector := mfgb.sql.Select()
	aggregation := make([]string, 0, len(mfgb.fns))
	for _, fn := range mfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(mfgb.fields)+len(mfgb.fns))
		for _, f := range mfgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(mfgb.fields...)...)
}

// MessageFlagSelect is the builder for selecting fields of MessageFlag entities.
type MessageFlagSelect struct {
	*MessageFlagQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (mfs *MessageFlagSelect) Scan(ctx context.Context, v interface{}) error {
	if err := mfs.prepareQuery(ctx); err != nil {
		return err
	}
	mfs.sql = mfs.MessageFlagQuery.sqlQuery(ctx)
	return mfs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mfs *MessageFlagSelect) ScanX(ctx context.Context, v interface{}) {
	if err := mfs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (mfs *MessageFlagSelect) Strings(ctx context.Context) ([]string, error) {
	if len(mfs.fields) > 1 {
		return nil, errors.New("ent: MessageFlagSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := mfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mfs *MessageFlagSelect) StringsX(ctx context.Context) []string {
	v, err := mfs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (mfs *MessageFlagSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mfs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{messageflag.Label}
	default:
		err = fmt.Errorf("ent: MessageFlagSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mfs *MessageFlagSelect) StringX(ctx context.Context) string {
	v, err := mfs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (mfs *MessageFlagSelect) Ints(ctx context.Context) ([]int, error) {
	if len(mfs.fields) > 1 {
		return nil, errors.New("ent: MessageFlagSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := mfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mfs *MessageFlagSelect) IntsX(ctx context.Context) []int {
	v, err := mfs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (mfs *MessageFlagSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mfs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{messageflag.Label}
	default:
		err = fmt.Errorf("ent: MessageFlagSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mfs *MessageFlagSelect) IntX(ctx context.Context) int {
	v, err := mfs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (mfs *MessageFlagSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(mfs.fields) > 1 {
		return nil, errors.New("ent: MessageFlagSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := mfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mfs *MessageFlagSelect) Float64sX(ctx context.Context) []float64 {
	v, err := mfs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (mfs *MessageFlagSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mfs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{messageflag.Label}
	default:
		err = fmt.Errorf("ent: MessageFlagSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mfs *MessageFlagSelect) Float64X(ctx context.Context) float64 {
	v, err := mfs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (mfs *MessageFlagSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(mfs.fields) > 1 {
		return nil, errors.New("ent: MessageFlagSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := mfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mfs *MessageFlagSelect) BoolsX(ctx context.Context) []bool {
	v, err := mfs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (mfs *MessageFlagSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mfs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{messageflag.Label}
	default:
		err = fmt.Errorf("ent: MessageFlagSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mfs *MessageFlagSelect) BoolX(ctx context.Context) bool {
	v, err := mfs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mfs *MessageFlagSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mfs.sql.Query()
	if err := mfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
