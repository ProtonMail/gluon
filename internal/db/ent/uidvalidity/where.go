// Code generated by ent, DO NOT EDIT.

package uidvalidity

import (
	"entgo.io/ent/dialect/sql"
	"github.com/ProtonMail/gluon/imap"
	"github.com/ProtonMail/gluon/internal/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UIDValidity {
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UIDValidity {
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UIDValidity {
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UIDValidity {
	return predicate.UIDValidity(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UIDValidity {
	return predicate.UIDValidity(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UIDValidity {
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UIDValidity {
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UIDValidity {
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UIDValidity {
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UIDValidity applies equality check predicate on the "UIDValidity" field. It's identical to UIDValidityEQ.
func UIDValidity(v imap.UID) predicate.UIDValidity {
	vc := uint32(v)
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUIDValidity), vc))
	})
}

// UIDValidityEQ applies the EQ predicate on the "UIDValidity" field.
func UIDValidityEQ(v imap.UID) predicate.UIDValidity {
	vc := uint32(v)
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUIDValidity), vc))
	})
}

// UIDValidityNEQ applies the NEQ predicate on the "UIDValidity" field.
func UIDValidityNEQ(v imap.UID) predicate.UIDValidity {
	vc := uint32(v)
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUIDValidity), vc))
	})
}

// UIDValidityIn applies the In predicate on the "UIDValidity" field.
func UIDValidityIn(vs ...imap.UID) predicate.UIDValidity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = uint32(vs[i])
	}
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUIDValidity), v...))
	})
}

// UIDValidityNotIn applies the NotIn predicate on the "UIDValidity" field.
func UIDValidityNotIn(vs ...imap.UID) predicate.UIDValidity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = uint32(vs[i])
	}
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUIDValidity), v...))
	})
}

// UIDValidityGT applies the GT predicate on the "UIDValidity" field.
func UIDValidityGT(v imap.UID) predicate.UIDValidity {
	vc := uint32(v)
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUIDValidity), vc))
	})
}

// UIDValidityGTE applies the GTE predicate on the "UIDValidity" field.
func UIDValidityGTE(v imap.UID) predicate.UIDValidity {
	vc := uint32(v)
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUIDValidity), vc))
	})
}

// UIDValidityLT applies the LT predicate on the "UIDValidity" field.
func UIDValidityLT(v imap.UID) predicate.UIDValidity {
	vc := uint32(v)
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUIDValidity), vc))
	})
}

// UIDValidityLTE applies the LTE predicate on the "UIDValidity" field.
func UIDValidityLTE(v imap.UID) predicate.UIDValidity {
	vc := uint32(v)
	return predicate.UIDValidity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUIDValidity), vc))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UIDValidity) predicate.UIDValidity {
	return predicate.UIDValidity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UIDValidity) predicate.UIDValidity {
	return predicate.UIDValidity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UIDValidity) predicate.UIDValidity {
	return predicate.UIDValidity(func(s *sql.Selector) {
		p(s.Not())
	})
}
