// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ProtonMail/gluon/imap"
	"github.com/ProtonMail/gluon/internal/db/ent/uidvalidity"
)

// UIDValidity is the model entity for the UIDValidity schema.
type UIDValidity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UIDValidity holds the value of the "UIDValidity" field.
	UIDValidity imap.UID `json:"UIDValidity,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UIDValidity) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case uidvalidity.FieldID, uidvalidity.FieldUIDValidity:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UIDValidity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UIDValidity fields.
func (uv *UIDValidity) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uidvalidity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uv.ID = int(value.Int64)
		case uidvalidity.FieldUIDValidity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field UIDValidity", values[i])
			} else if value.Valid {
				uv.UIDValidity = imap.UID(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UIDValidity.
// Note that you need to call UIDValidity.Unwrap() before calling this method if this UIDValidity
// was returned from a transaction, and the transaction was committed or rolled back.
func (uv *UIDValidity) Update() *UIDValidityUpdateOne {
	return (&UIDValidityClient{config: uv.config}).UpdateOne(uv)
}

// Unwrap unwraps the UIDValidity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uv *UIDValidity) Unwrap() *UIDValidity {
	_tx, ok := uv.config.driver.(*txDriver)
	if !ok {
		panic("ent: UIDValidity is not a transactional entity")
	}
	uv.config.driver = _tx.drv
	return uv
}

// String implements the fmt.Stringer.
func (uv *UIDValidity) String() string {
	var builder strings.Builder
	builder.WriteString("UIDValidity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uv.ID))
	builder.WriteString("UIDValidity=")
	builder.WriteString(fmt.Sprintf("%v", uv.UIDValidity))
	builder.WriteByte(')')
	return builder.String()
}

// UIDValidities is a parsable slice of UIDValidity.
type UIDValidities []*UIDValidity

func (uv UIDValidities) config(cfg config) {
	for _i := range uv {
		uv[_i].config = cfg
	}
}
