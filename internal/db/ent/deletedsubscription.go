// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ProtonMail/gluon/imap"
	"github.com/ProtonMail/gluon/internal/db/ent/deletedsubscription"
)

// DeletedSubscription is the model entity for the DeletedSubscription schema.
type DeletedSubscription struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// RemoteID holds the value of the "RemoteID" field.
	RemoteID imap.MailboxID `json:"RemoteID,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeletedSubscription) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case deletedsubscription.FieldID:
			values[i] = new(sql.NullInt64)
		case deletedsubscription.FieldName, deletedsubscription.FieldRemoteID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DeletedSubscription", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeletedSubscription fields.
func (ds *DeletedSubscription) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deletedsubscription.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ds.ID = int(value.Int64)
		case deletedsubscription.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				ds.Name = value.String
			}
		case deletedsubscription.FieldRemoteID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RemoteID", values[i])
			} else if value.Valid {
				ds.RemoteID = imap.MailboxID(value.String)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DeletedSubscription.
// Note that you need to call DeletedSubscription.Unwrap() before calling this method if this DeletedSubscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (ds *DeletedSubscription) Update() *DeletedSubscriptionUpdateOne {
	return (&DeletedSubscriptionClient{config: ds.config}).UpdateOne(ds)
}

// Unwrap unwraps the DeletedSubscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ds *DeletedSubscription) Unwrap() *DeletedSubscription {
	_tx, ok := ds.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeletedSubscription is not a transactional entity")
	}
	ds.config.driver = _tx.drv
	return ds
}

// String implements the fmt.Stringer.
func (ds *DeletedSubscription) String() string {
	var builder strings.Builder
	builder.WriteString("DeletedSubscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ds.ID))
	builder.WriteString("Name=")
	builder.WriteString(ds.Name)
	builder.WriteString(", ")
	builder.WriteString("RemoteID=")
	builder.WriteString(fmt.Sprintf("%v", ds.RemoteID))
	builder.WriteByte(')')
	return builder.String()
}

// DeletedSubscriptions is a parsable slice of DeletedSubscription.
type DeletedSubscriptions []*DeletedSubscription

func (ds DeletedSubscriptions) config(cfg config) {
	for _i := range ds {
		ds[_i].config = cfg
	}
}
