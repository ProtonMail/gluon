inputs:
   artifact-name:
     required: true

runs:
  using: "composite"

  steps:
    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'microsoft'

    - name: Set up Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        version: 1.10.0

    - name: Set up MinGW
      if: ${{ runner.os == 'Windows' }}
      uses: egor-tensin/setup-mingw@v2

    - name: Bootstrap vcpkg
      run: internal/parser/extern/vcpkg/bootstrap-vcpkg.sh
      shell: bash

    - name: Load vcpkg build cache (windows)
      uses: actions/cache@v3
      if: ${{ runner.os == 'Windows' }}
      with:
        path: ~/AppData/Local/vcpkg
        key: ${{ runner.os }}-${{ hashFiles('internal/parser/vcpkg.json') }}-v2

    - name: Load vcpkg build cache (not windows)
      uses: actions/cache@v3
      if: ${{ runner.os != 'Windows' }}
      with:
        path: ~/.cache/vcpkg
        key: ${{ runner.os }}-${{ hashFiles('internal/parser/vcpkg.json') }}-v2

    - name: Configure CMake project (windows)
      if: ${{ runner.os == 'Windows' }}
      run: cmake -B build -S internal/parser -G Ninja -W no-dev -DCMAKE_BUILD_TYPE=Release -DVCPKG_TARGET_TRIPLET=x64-mingw-static -DVCPKG_BUILD_TYPE=release
      shell: bash

    - name: Configure CMake project (mac)
      if: ${{ runner.os == 'macOS' }}
      run: |
        cmake -B build-x64 -S internal/parser -G Ninja -W no-dev -DCMAKE_BUILD_TYPE=Release -DVCPKG_OVERLAY_TRIPLETS="$PWD/internal/parser/overlay-triplet" -DVCPKG_HOST_TRIPLET=x64-osx-min-11.0 -DVCPKG_TARGET_TRIPLET=x64-osx-min-11.0 -DCMAKE_OSX_ARCHITECTURES=x86_64 -DVCPKG_OSX_ARCHITECTURES=x86_64 -DVCPKG_BUILD_TYPE=release
        cmake -B build-arm64 -S internal/parser -G Ninja -W no-dev -DCMAKE_BUILD_TYPE=Release -DVCPKG_OVERLAY_TRIPLETS="$PWD/internal/parser/overlay-triplet" -DVCPKG_TARGET_TRIPLET=arm64-osx-min-11.0 -DCMAKE_OSX_ARCHITECTURES=arm64 -DVCPKG_OSX_ARCHITECTURES=arm64 -DVCPKG_BUILD_TYPE=release
      shell: bash

    - name: Configure CMake project (not windows & not mac)
      if: ${{ (runner.os != 'Windows') && (runner.os != 'macOS') }}
      run: cmake -B build -S internal/parser -G Ninja -W no-dev -DCMAKE_BUILD_TYPE=Release -DVCPKG_BUILD_TYPE=release
      shell: bash

    - name: Delete the old parser
      run: rm -r internal/parser/lib
      shell: bash

    - name: Build the new parser (not mac)
      if: ${{ runner.os != 'macOS' }}
      run: cmake --build build
      shell: bash

    - name: Test the new parser (not mac)
      if: ${{ runner.os != 'macOS' }}
      run: ctest --test-dir build
      shell: bash

    - name: Build the new parser (mac)
      if: ${{ runner.os == 'macOS' }}
      run: |
        cmake --build build-x64
        cmake --build build-arm64
      shell: bash

    - name: Test the new parser (mac)
      if: ${{ runner.os == 'macOS' }}
      # only run tests on x64 since the build env does not have arm64 CPUs
      run: ctest --test-dir build-x64
      shell: bash

    - name: Upload static libs
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.artifact-name }}
        path: internal/parser/lib/*
